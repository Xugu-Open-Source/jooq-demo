/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.java.db.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Result;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableLike;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.demo.java.db.Indexes;
import org.jooq.demo.java.db.Keys;
import org.jooq.demo.java.db.Public;
import org.jooq.demo.java.db.tables.records.CustomerRecord;
import org.jooq.demo.java.db.tables.records.InventoryRecord;
import org.jooq.demo.java.db.tables.records.PaymentP2007_01Record;
import org.jooq.demo.java.db.tables.records.PaymentP2007_02Record;
import org.jooq.demo.java.db.tables.records.PaymentP2007_03Record;
import org.jooq.demo.java.db.tables.records.PaymentP2007_04Record;
import org.jooq.demo.java.db.tables.records.PaymentP2007_05Record;
import org.jooq.demo.java.db.tables.records.PaymentP2007_06Record;
import org.jooq.demo.java.db.tables.records.PaymentRecord;
import org.jooq.demo.java.db.tables.records.RentalRecord;
import org.jooq.demo.java.db.tables.records.StaffRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rental extends TableImpl<RentalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.rental</code>
     */
    public static final Rental RENTAL = new Rental();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RentalRecord> getRecordType() {
        return RentalRecord.class;
    }

    /**
     * The column <code>public.rental.rental_id</code>.
     */
    public final TableField<RentalRecord, Long> RENTAL_ID = createField(DSL.name("rental_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.rental.rental_date</code>.
     */
    public final TableField<RentalRecord, LocalDateTime> RENTAL_DATE = createField(DSL.name("rental_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.rental.inventory_id</code>.
     */
    public final TableField<RentalRecord, Long> INVENTORY_ID = createField(DSL.name("inventory_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.rental.customer_id</code>.
     */
    public final TableField<RentalRecord, Long> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.rental.return_date</code>.
     */
    public final TableField<RentalRecord, LocalDateTime> RETURN_DATE = createField(DSL.name("return_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.rental.staff_id</code>.
     */
    public final TableField<RentalRecord, Long> STAFF_ID = createField(DSL.name("staff_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.rental.last_update</code>.
     */
    public final TableField<RentalRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private Rental(Name alias, Table<RentalRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rental(Name alias, Table<RentalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.rental</code> table reference
     */
    public Rental(String alias) {
        this(DSL.name(alias), RENTAL);
    }

    /**
     * Create an aliased <code>public.rental</code> table reference
     */
    public Rental(Name alias) {
        this(alias, RENTAL);
    }

    /**
     * Create a <code>public.rental</code> table reference
     */
    public Rental() {
        this(DSL.name("rental"), null);
    }

    public <O extends Record> Rental(Table<O> child, ForeignKey<O, RentalRecord> key) {
        super(child, key, RENTAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_INVENTORY_ID, Indexes.IDX_UNQ_RENTAL_RENTAL_DATE_INVENTORY_ID_CUSTOMER_ID);
    }

    @Override
    public Identity<RentalRecord, Long> getIdentity() {
        return (Identity<RentalRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RentalRecord> getPrimaryKey() {
        return Keys.RENTAL_PKEY;
    }

    @Override
    public List<ForeignKey<RentalRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RENTAL__RENTAL_INVENTORY_ID_FKEY, Keys.RENTAL__RENTAL_CUSTOMER_ID_FKEY, Keys.RENTAL__RENTAL_STAFF_ID_FKEY);
    }

    private transient Inventory _inventory;
    private transient Customer _customer;
    private transient Staff _staff;

    /**
     * Get the implicit join path to the <code>public.inventory</code> table.
     */
    public Inventory inventory() {
        if (_inventory == null)
            _inventory = new Inventory(this, Keys.RENTAL__RENTAL_INVENTORY_ID_FKEY);

        return _inventory;
    }

    /**
     * Get the implicit join path to the <code>public.customer</code> table.
     */
    public Customer customer() {
        if (_customer == null)
            _customer = new Customer(this, Keys.RENTAL__RENTAL_CUSTOMER_ID_FKEY);

        return _customer;
    }

    /**
     * Get the implicit join path to the <code>public.staff</code> table.
     */
    public Staff staff() {
        if (_staff == null)
            _staff = new Staff(this, Keys.RENTAL__RENTAL_STAFF_ID_FKEY);

        return _staff;
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment</code> one-to-many child table.
     */
    public Condition paymentExists() {
        return paymentExists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentExists(Function<? super Payment, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT__PAYMENT_RENTAL_ID_FKEY, t -> subquery.apply((Payment) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_01</code> one-to-many child table.
     */
    public Condition paymentP2007_01Exists() {
        return paymentP2007_01Exists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_01</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentP2007_01Exists(Function<? super PaymentP2007_01, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT_P2007_01__PAYMENT_P2007_01_RENTAL_ID_FKEY, t -> subquery.apply((PaymentP2007_01) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_02</code> one-to-many child table.
     */
    public Condition paymentP2007_02Exists() {
        return paymentP2007_02Exists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_02</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentP2007_02Exists(Function<? super PaymentP2007_02, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT_P2007_02__PAYMENT_P2007_02_RENTAL_ID_FKEY, t -> subquery.apply((PaymentP2007_02) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_03</code> one-to-many child table.
     */
    public Condition paymentP2007_03Exists() {
        return paymentP2007_03Exists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_03</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentP2007_03Exists(Function<? super PaymentP2007_03, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT_P2007_03__PAYMENT_P2007_03_RENTAL_ID_FKEY, t -> subquery.apply((PaymentP2007_03) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_04</code> one-to-many child table.
     */
    public Condition paymentP2007_04Exists() {
        return paymentP2007_04Exists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_04</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentP2007_04Exists(Function<? super PaymentP2007_04, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT_P2007_04__PAYMENT_P2007_04_RENTAL_ID_FKEY, t -> subquery.apply((PaymentP2007_04) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_05</code> one-to-many child table.
     */
    public Condition paymentP2007_05Exists() {
        return paymentP2007_05Exists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_05</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentP2007_05Exists(Function<? super PaymentP2007_05, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT_P2007_05__PAYMENT_P2007_05_RENTAL_ID_FKEY, t -> subquery.apply((PaymentP2007_05) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_06</code> one-to-many child table.
     */
    public Condition paymentP2007_06Exists() {
        return paymentP2007_06Exists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_06</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentP2007_06Exists(Function<? super PaymentP2007_06, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_RENTAL_ID_FKEY, t -> subquery.apply((PaymentP2007_06) t));
    }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.rental</code> to-one parent table.
     */
    public Field<InventoryRecord> inventoryRow() {
        return inventoryRow(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.rental</code> to-one parent table.
     */
    public <O extends Record> Field<O> inventoryRow(Function<? super Inventory, ? extends TableLike<O>> subquery) {
        return toOneRow(Keys.RENTAL__RENTAL_INVENTORY_ID_FKEY, t -> subquery.apply((Inventory) t));
    }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.rental</code> to-one parent table.
     */
    public Field<CustomerRecord> customerRow() {
        return customerRow(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.rental</code> to-one parent table.
     */
    public <O extends Record> Field<O> customerRow(Function<? super Customer, ? extends TableLike<O>> subquery) {
        return toOneRow(Keys.RENTAL__RENTAL_CUSTOMER_ID_FKEY, t -> subquery.apply((Customer) t));
    }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.rental</code> to-one parent table.
     */
    public Field<StaffRecord> staffRow() {
        return staffRow(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.rental</code> to-one parent table.
     */
    public <O extends Record> Field<O> staffRow(Function<? super Staff, ? extends TableLike<O>> subquery) {
        return toOneRow(Keys.RENTAL__RENTAL_STAFF_ID_FKEY, t -> subquery.apply((Staff) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment</code> one-to-many child table.
     */
    public Field<Result<PaymentRecord>> paymentMultiset() {
        return paymentMultiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment</code> one-to-many child table.
     */
    public <O extends Record> Field<Result<O>> paymentMultiset(Function<? super Payment, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT__PAYMENT_RENTAL_ID_FKEY, t -> subquery.apply((Payment) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_01</code> one-to-many child
     * table.
     */
    public Field<Result<PaymentP2007_01Record>> paymentP2007_01Multiset() {
        return paymentP2007_01Multiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_01</code> one-to-many child
     * table.
     */
    public <O extends Record> Field<Result<O>> paymentP2007_01Multiset(Function<? super PaymentP2007_01, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT_P2007_01__PAYMENT_P2007_01_RENTAL_ID_FKEY, t -> subquery.apply((PaymentP2007_01) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_02</code> one-to-many child
     * table.
     */
    public Field<Result<PaymentP2007_02Record>> paymentP2007_02Multiset() {
        return paymentP2007_02Multiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_02</code> one-to-many child
     * table.
     */
    public <O extends Record> Field<Result<O>> paymentP2007_02Multiset(Function<? super PaymentP2007_02, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT_P2007_02__PAYMENT_P2007_02_RENTAL_ID_FKEY, t -> subquery.apply((PaymentP2007_02) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_03</code> one-to-many child
     * table.
     */
    public Field<Result<PaymentP2007_03Record>> paymentP2007_03Multiset() {
        return paymentP2007_03Multiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_03</code> one-to-many child
     * table.
     */
    public <O extends Record> Field<Result<O>> paymentP2007_03Multiset(Function<? super PaymentP2007_03, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT_P2007_03__PAYMENT_P2007_03_RENTAL_ID_FKEY, t -> subquery.apply((PaymentP2007_03) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_04</code> one-to-many child
     * table.
     */
    public Field<Result<PaymentP2007_04Record>> paymentP2007_04Multiset() {
        return paymentP2007_04Multiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_04</code> one-to-many child
     * table.
     */
    public <O extends Record> Field<Result<O>> paymentP2007_04Multiset(Function<? super PaymentP2007_04, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT_P2007_04__PAYMENT_P2007_04_RENTAL_ID_FKEY, t -> subquery.apply((PaymentP2007_04) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_05</code> one-to-many child
     * table.
     */
    public Field<Result<PaymentP2007_05Record>> paymentP2007_05Multiset() {
        return paymentP2007_05Multiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_05</code> one-to-many child
     * table.
     */
    public <O extends Record> Field<Result<O>> paymentP2007_05Multiset(Function<? super PaymentP2007_05, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT_P2007_05__PAYMENT_P2007_05_RENTAL_ID_FKEY, t -> subquery.apply((PaymentP2007_05) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_06</code> one-to-many child
     * table.
     */
    public Field<Result<PaymentP2007_06Record>> paymentP2007_06Multiset() {
        return paymentP2007_06Multiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_06</code> one-to-many child
     * table.
     */
    public <O extends Record> Field<Result<O>> paymentP2007_06Multiset(Function<? super PaymentP2007_06, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_RENTAL_ID_FKEY, t -> subquery.apply((PaymentP2007_06) t));
    }

    @Override
    public Rental as(String alias) {
        return new Rental(DSL.name(alias), this);
    }

    @Override
    public Rental as(Name alias) {
        return new Rental(alias, this);
    }

    @Override
    public Rental as(Table<?> alias) {
        return new Rental(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rental rename(String name) {
        return new Rental(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rental rename(Name name) {
        return new Rental(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rental rename(Table<?> name) {
        return new Rental(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDateTime, Long, Long, LocalDateTime, Long, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super LocalDateTime, ? super Long, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super LocalDateTime, ? super Long, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
