/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables.records


import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.demo.kotlin.db.tables.Store
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StoreRecord() : UpdatableRecordImpl<StoreRecord>(Store.STORE), Record4<Long?, Long?, Long?, LocalDateTime?> {

    open var storeId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var managerStaffId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var addressId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var lastUpdate: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Long?, Long?, Long?, LocalDateTime?> = super.fieldsRow() as Row4<Long?, Long?, Long?, LocalDateTime?>
    override fun valuesRow(): Row4<Long?, Long?, Long?, LocalDateTime?> = super.valuesRow() as Row4<Long?, Long?, Long?, LocalDateTime?>
    override fun field1(): Field<Long?> = Store.STORE.STORE_ID
    override fun field2(): Field<Long?> = Store.STORE.MANAGER_STAFF_ID
    override fun field3(): Field<Long?> = Store.STORE.ADDRESS_ID
    override fun field4(): Field<LocalDateTime?> = Store.STORE.LAST_UPDATE
    override fun component1(): Long? = storeId
    override fun component2(): Long? = managerStaffId
    override fun component3(): Long? = addressId
    override fun component4(): LocalDateTime? = lastUpdate
    override fun value1(): Long? = storeId
    override fun value2(): Long? = managerStaffId
    override fun value3(): Long? = addressId
    override fun value4(): LocalDateTime? = lastUpdate

    override fun value1(value: Long?): StoreRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Long?): StoreRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Long?): StoreRecord {
        set(2, value)
        return this
    }

    override fun value4(value: LocalDateTime?): StoreRecord {
        set(3, value)
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: LocalDateTime?): StoreRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised StoreRecord
     */
    constructor(storeId: Long? = null, managerStaffId: Long? = null, addressId: Long? = null, lastUpdate: LocalDateTime? = null): this() {
        this.storeId = storeId
        this.managerStaffId = managerStaffId
        this.addressId = addressId
        this.lastUpdate = lastUpdate
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised StoreRecord
     */
    constructor(value: org.jooq.demo.kotlin.db.tables.pojos.Store?): this() {
        if (value != null) {
            this.storeId = value.storeId
            this.managerStaffId = value.managerStaffId
            this.addressId = value.addressId
            this.lastUpdate = value.lastUpdate
            resetChangedOnNotNull()
        }
    }
}
