/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables.records


import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.demo.kotlin.db.tables.Rental
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RentalRecord() : UpdatableRecordImpl<RentalRecord>(Rental.RENTAL), Record7<Long?, LocalDateTime?, Long?, Long?, LocalDateTime?, Long?, LocalDateTime?> {

    open var rentalId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var rentalDate: LocalDateTime?
        set(value): Unit = set(1, value)
        get(): LocalDateTime? = get(1) as LocalDateTime?

    open var inventoryId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var customerId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var returnDate: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    open var staffId: Long?
        set(value): Unit = set(5, value)
        get(): Long? = get(5) as Long?

    open var lastUpdate: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    public override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    public override fun fieldsRow(): Row7<Long?, LocalDateTime?, Long?, Long?, LocalDateTime?, Long?, LocalDateTime?> = super.fieldsRow() as Row7<Long?, LocalDateTime?, Long?, Long?, LocalDateTime?, Long?, LocalDateTime?>
    public override fun valuesRow(): Row7<Long?, LocalDateTime?, Long?, Long?, LocalDateTime?, Long?, LocalDateTime?> = super.valuesRow() as Row7<Long?, LocalDateTime?, Long?, Long?, LocalDateTime?, Long?, LocalDateTime?>
    public override fun field1(): Field<Long?> = Rental.RENTAL.RENTAL_ID
    public override fun field2(): Field<LocalDateTime?> = Rental.RENTAL.RENTAL_DATE
    public override fun field3(): Field<Long?> = Rental.RENTAL.INVENTORY_ID
    public override fun field4(): Field<Long?> = Rental.RENTAL.CUSTOMER_ID
    public override fun field5(): Field<LocalDateTime?> = Rental.RENTAL.RETURN_DATE
    public override fun field6(): Field<Long?> = Rental.RENTAL.STAFF_ID
    public override fun field7(): Field<LocalDateTime?> = Rental.RENTAL.LAST_UPDATE
    public override fun component1(): Long? = rentalId
    public override fun component2(): LocalDateTime? = rentalDate
    public override fun component3(): Long? = inventoryId
    public override fun component4(): Long? = customerId
    public override fun component5(): LocalDateTime? = returnDate
    public override fun component6(): Long? = staffId
    public override fun component7(): LocalDateTime? = lastUpdate
    public override fun value1(): Long? = rentalId
    public override fun value2(): LocalDateTime? = rentalDate
    public override fun value3(): Long? = inventoryId
    public override fun value4(): Long? = customerId
    public override fun value5(): LocalDateTime? = returnDate
    public override fun value6(): Long? = staffId
    public override fun value7(): LocalDateTime? = lastUpdate

    public override fun value1(value: Long?): RentalRecord {
        set(0, value)
        return this
    }

    public override fun value2(value: LocalDateTime?): RentalRecord {
        set(1, value)
        return this
    }

    public override fun value3(value: Long?): RentalRecord {
        set(2, value)
        return this
    }

    public override fun value4(value: Long?): RentalRecord {
        set(3, value)
        return this
    }

    public override fun value5(value: LocalDateTime?): RentalRecord {
        set(4, value)
        return this
    }

    public override fun value6(value: Long?): RentalRecord {
        set(5, value)
        return this
    }

    public override fun value7(value: LocalDateTime?): RentalRecord {
        set(6, value)
        return this
    }

    public override fun values(value1: Long?, value2: LocalDateTime?, value3: Long?, value4: Long?, value5: LocalDateTime?, value6: Long?, value7: LocalDateTime?): RentalRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised RentalRecord
     */
    constructor(rentalId: Long? = null, rentalDate: LocalDateTime? = null, inventoryId: Long? = null, customerId: Long? = null, returnDate: LocalDateTime? = null, staffId: Long? = null, lastUpdate: LocalDateTime? = null): this() {
        this.rentalId = rentalId
        this.rentalDate = rentalDate
        this.inventoryId = inventoryId
        this.customerId = customerId
        this.returnDate = returnDate
        this.staffId = staffId
        this.lastUpdate = lastUpdate
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised RentalRecord
     */
    constructor(value: org.jooq.demo.kotlin.db.tables.pojos.Rental?): this() {
        if (value != null) {
            this.rentalId = value.rentalId
            this.rentalDate = value.rentalDate
            this.inventoryId = value.inventoryId
            this.customerId = value.customerId
            this.returnDate = value.returnDate
            this.staffId = value.staffId
            this.lastUpdate = value.lastUpdate
            resetChangedOnNotNull()
        }
    }
}
