/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables.records


import java.math.BigDecimal

import org.jooq.Field
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.demo.kotlin.db.enums.MpaaRating
import org.jooq.demo.kotlin.db.tables.FilmList
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FilmListRecord() : TableRecordImpl<FilmListRecord>(FilmList.FILM_LIST), Record8<Long?, String?, String?, String?, BigDecimal?, Short?, MpaaRating?, String?> {

    open var fid: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var title: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var description: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var category: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var price: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    open var length: Short?
        set(value): Unit = set(5, value)
        get(): Short? = get(5) as Short?

    open var rating: MpaaRating?
        set(value): Unit = set(6, value)
        get(): MpaaRating? = get(6) as MpaaRating?

    open var actors: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    public override fun fieldsRow(): Row8<Long?, String?, String?, String?, BigDecimal?, Short?, MpaaRating?, String?> = super.fieldsRow() as Row8<Long?, String?, String?, String?, BigDecimal?, Short?, MpaaRating?, String?>
    public override fun valuesRow(): Row8<Long?, String?, String?, String?, BigDecimal?, Short?, MpaaRating?, String?> = super.valuesRow() as Row8<Long?, String?, String?, String?, BigDecimal?, Short?, MpaaRating?, String?>
    public override fun field1(): Field<Long?> = FilmList.FILM_LIST.FID
    public override fun field2(): Field<String?> = FilmList.FILM_LIST.TITLE
    public override fun field3(): Field<String?> = FilmList.FILM_LIST.DESCRIPTION
    public override fun field4(): Field<String?> = FilmList.FILM_LIST.CATEGORY
    public override fun field5(): Field<BigDecimal?> = FilmList.FILM_LIST.PRICE
    public override fun field6(): Field<Short?> = FilmList.FILM_LIST.LENGTH
    public override fun field7(): Field<MpaaRating?> = FilmList.FILM_LIST.RATING
    public override fun field8(): Field<String?> = FilmList.FILM_LIST.ACTORS
    public override fun component1(): Long? = fid
    public override fun component2(): String? = title
    public override fun component3(): String? = description
    public override fun component4(): String? = category
    public override fun component5(): BigDecimal? = price
    public override fun component6(): Short? = length
    public override fun component7(): MpaaRating? = rating
    public override fun component8(): String? = actors
    public override fun value1(): Long? = fid
    public override fun value2(): String? = title
    public override fun value3(): String? = description
    public override fun value4(): String? = category
    public override fun value5(): BigDecimal? = price
    public override fun value6(): Short? = length
    public override fun value7(): MpaaRating? = rating
    public override fun value8(): String? = actors

    public override fun value1(value: Long?): FilmListRecord {
        set(0, value)
        return this
    }

    public override fun value2(value: String?): FilmListRecord {
        set(1, value)
        return this
    }

    public override fun value3(value: String?): FilmListRecord {
        set(2, value)
        return this
    }

    public override fun value4(value: String?): FilmListRecord {
        set(3, value)
        return this
    }

    public override fun value5(value: BigDecimal?): FilmListRecord {
        set(4, value)
        return this
    }

    public override fun value6(value: Short?): FilmListRecord {
        set(5, value)
        return this
    }

    public override fun value7(value: MpaaRating?): FilmListRecord {
        set(6, value)
        return this
    }

    public override fun value8(value: String?): FilmListRecord {
        set(7, value)
        return this
    }

    public override fun values(value1: Long?, value2: String?, value3: String?, value4: String?, value5: BigDecimal?, value6: Short?, value7: MpaaRating?, value8: String?): FilmListRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised FilmListRecord
     */
    constructor(fid: Long? = null, title: String? = null, description: String? = null, category: String? = null, price: BigDecimal? = null, length: Short? = null, rating: MpaaRating? = null, actors: String? = null): this() {
        this.fid = fid
        this.title = title
        this.description = description
        this.category = category
        this.price = price
        this.length = length
        this.rating = rating
        this.actors = actors
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised FilmListRecord
     */
    constructor(value: org.jooq.demo.kotlin.db.tables.pojos.FilmList?): this() {
        if (value != null) {
            this.fid = value.fid
            this.title = value.title
            this.description = value.description
            this.category = value.category
            this.price = value.price
            this.length = value.length
            this.rating = value.rating
            this.actors = value.actors
            resetChangedOnNotNull()
        }
    }
}
