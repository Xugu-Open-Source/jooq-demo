/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables.records


import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.demo.kotlin.db.tables.Address
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AddressRecord() : UpdatableRecordImpl<AddressRecord>(Address.ADDRESS), Record8<Long?, String?, String?, String?, Long?, String?, String?, LocalDateTime?> {

    open var addressId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var address: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var address2: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var district: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var cityId: Long?
        set(value): Unit = set(4, value)
        get(): Long? = get(4) as Long?

    open var postalCode: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var phone: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var lastUpdate: LocalDateTime?
        set(value): Unit = set(7, value)
        get(): LocalDateTime? = get(7) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    public override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    public override fun fieldsRow(): Row8<Long?, String?, String?, String?, Long?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row8<Long?, String?, String?, String?, Long?, String?, String?, LocalDateTime?>
    public override fun valuesRow(): Row8<Long?, String?, String?, String?, Long?, String?, String?, LocalDateTime?> = super.valuesRow() as Row8<Long?, String?, String?, String?, Long?, String?, String?, LocalDateTime?>
    public override fun field1(): Field<Long?> = Address.ADDRESS.ADDRESS_ID
    public override fun field2(): Field<String?> = Address.ADDRESS.ADDRESS_
    public override fun field3(): Field<String?> = Address.ADDRESS.ADDRESS2
    public override fun field4(): Field<String?> = Address.ADDRESS.DISTRICT
    public override fun field5(): Field<Long?> = Address.ADDRESS.CITY_ID
    public override fun field6(): Field<String?> = Address.ADDRESS.POSTAL_CODE
    public override fun field7(): Field<String?> = Address.ADDRESS.PHONE
    public override fun field8(): Field<LocalDateTime?> = Address.ADDRESS.LAST_UPDATE
    public override fun component1(): Long? = addressId
    public override fun component2(): String? = address
    public override fun component3(): String? = address2
    public override fun component4(): String? = district
    public override fun component5(): Long? = cityId
    public override fun component6(): String? = postalCode
    public override fun component7(): String? = phone
    public override fun component8(): LocalDateTime? = lastUpdate
    public override fun value1(): Long? = addressId
    public override fun value2(): String? = address
    public override fun value3(): String? = address2
    public override fun value4(): String? = district
    public override fun value5(): Long? = cityId
    public override fun value6(): String? = postalCode
    public override fun value7(): String? = phone
    public override fun value8(): LocalDateTime? = lastUpdate

    public override fun value1(value: Long?): AddressRecord {
        set(0, value)
        return this
    }

    public override fun value2(value: String?): AddressRecord {
        set(1, value)
        return this
    }

    public override fun value3(value: String?): AddressRecord {
        set(2, value)
        return this
    }

    public override fun value4(value: String?): AddressRecord {
        set(3, value)
        return this
    }

    public override fun value5(value: Long?): AddressRecord {
        set(4, value)
        return this
    }

    public override fun value6(value: String?): AddressRecord {
        set(5, value)
        return this
    }

    public override fun value7(value: String?): AddressRecord {
        set(6, value)
        return this
    }

    public override fun value8(value: LocalDateTime?): AddressRecord {
        set(7, value)
        return this
    }

    public override fun values(value1: Long?, value2: String?, value3: String?, value4: String?, value5: Long?, value6: String?, value7: String?, value8: LocalDateTime?): AddressRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    constructor(addressId: Long? = null, address: String? = null, address2: String? = null, district: String? = null, cityId: Long? = null, postalCode: String? = null, phone: String? = null, lastUpdate: LocalDateTime? = null): this() {
        this.addressId = addressId
        this.address = address
        this.address2 = address2
        this.district = district
        this.cityId = cityId
        this.postalCode = postalCode
        this.phone = phone
        this.lastUpdate = lastUpdate
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    constructor(value: org.jooq.demo.kotlin.db.tables.pojos.Address?): this() {
        if (value != null) {
            this.addressId = value.addressId
            this.address = value.address
            this.address2 = value.address2
            this.district = value.district
            this.cityId = value.cityId
            this.postalCode = value.postalCode
            this.phone = value.phone
            this.lastUpdate = value.lastUpdate
            resetChangedOnNotNull()
        }
    }
}
