/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables


import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row11
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.demo.kotlin.db.Public
import org.jooq.demo.kotlin.db.keys.STAFF_PKEY
import org.jooq.demo.kotlin.db.keys.STAFF__STAFF_ADDRESS_ID_FKEY
import org.jooq.demo.kotlin.db.keys.STAFF__STAFF_STORE_ID_FKEY
import org.jooq.demo.kotlin.db.tables.records.StaffRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Staff(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, StaffRecord>?,
    aliased: Table<StaffRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<StaffRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.staff</code>
         */
        val STAFF: Staff = Staff()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<StaffRecord> = StaffRecord::class.java

    /**
     * The column <code>public.staff.staff_id</code>.
     */
    val STAFF_ID: TableField<StaffRecord, Long?> = createField(DSL.name("staff_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.staff.first_name</code>.
     */
    val FIRST_NAME: TableField<StaffRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45).nullable(false), this, "")

    /**
     * The column <code>public.staff.last_name</code>.
     */
    val LAST_NAME: TableField<StaffRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45).nullable(false), this, "")

    /**
     * The column <code>public.staff.address_id</code>.
     */
    val ADDRESS_ID: TableField<StaffRecord, Long?> = createField(DSL.name("address_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.staff.email</code>.
     */
    val EMAIL: TableField<StaffRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.staff.store_id</code>.
     */
    val STORE_ID: TableField<StaffRecord, Long?> = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.staff.active</code>.
     */
    val ACTIVE: TableField<StaffRecord, Boolean?> = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.staff.username</code>.
     */
    val USERNAME: TableField<StaffRecord, String?> = createField(DSL.name("username"), SQLDataType.VARCHAR(16).nullable(false), this, "")

    /**
     * The column <code>public.staff.password</code>.
     */
    val PASSWORD: TableField<StaffRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(40), this, "")

    /**
     * The column <code>public.staff.last_update</code>.
     */
    val LAST_UPDATE: TableField<StaffRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>public.staff.picture</code>.
     */
    val PICTURE: TableField<StaffRecord, ByteArray?> = createField(DSL.name("picture"), SQLDataType.BLOB, this, "")

    private constructor(alias: Name, aliased: Table<StaffRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<StaffRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.staff</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.staff</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.staff</code> table reference
     */
    constructor(): this(DSL.name("staff"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, StaffRecord>): this(Internal.createPathAlias(child, key), child, key, STAFF, null)
    public override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    public override fun getIdentity(): Identity<StaffRecord, Long?> = super.getIdentity() as Identity<StaffRecord, Long?>
    public override fun getPrimaryKey(): UniqueKey<StaffRecord> = STAFF_PKEY
    public override fun getReferences(): List<ForeignKey<StaffRecord, *>> = listOf(STAFF__STAFF_ADDRESS_ID_FKEY, STAFF__STAFF_STORE_ID_FKEY)

    private lateinit var _address: Address
    private lateinit var _store: Store

    /**
     * Get the implicit join path to the <code>public.address</code> table.
     */
    fun address(): Address {
        if (!this::_address.isInitialized)
            _address = Address(this, STAFF__STAFF_ADDRESS_ID_FKEY)

        return _address;
    }

    val address: Address
        get(): Address = address()

    /**
     * Get the implicit join path to the <code>public.store</code> table.
     */
    fun store(): Store {
        if (!this::_store.isInitialized)
            _store = Store(this, STAFF__STAFF_STORE_ID_FKEY)

        return _store;
    }

    val store: Store
        get(): Store = store()
    public override fun `as`(alias: String): Staff = Staff(DSL.name(alias), this)
    public override fun `as`(alias: Name): Staff = Staff(alias, this)
    public override fun `as`(alias: Table<*>): Staff = Staff(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): Staff = Staff(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): Staff = Staff(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): Staff = Staff(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------
    public override fun fieldsRow(): Row11<Long?, String?, String?, Long?, String?, Long?, Boolean?, String?, String?, LocalDateTime?, ByteArray?> = super.fieldsRow() as Row11<Long?, String?, String?, Long?, String?, Long?, Boolean?, String?, String?, LocalDateTime?, ByteArray?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, String?, Long?, String?, Long?, Boolean?, String?, String?, LocalDateTime?, ByteArray?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, String?, Long?, String?, Long?, Boolean?, String?, String?, LocalDateTime?, ByteArray?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
