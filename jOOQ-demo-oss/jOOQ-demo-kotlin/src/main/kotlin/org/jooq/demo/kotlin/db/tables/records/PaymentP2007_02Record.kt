/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables.records


import java.math.BigDecimal
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.demo.kotlin.db.tables.PaymentP2007_02
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PaymentP2007_02Record() : TableRecordImpl<PaymentP2007_02Record>(PaymentP2007_02.PAYMENT_P2007_02), Record6<Long?, Long?, Long?, Long?, BigDecimal?, LocalDateTime?> {

    open var paymentId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var customerId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var staffId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var rentalId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var amount: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    open var paymentDate: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    public override fun fieldsRow(): Row6<Long?, Long?, Long?, Long?, BigDecimal?, LocalDateTime?> = super.fieldsRow() as Row6<Long?, Long?, Long?, Long?, BigDecimal?, LocalDateTime?>
    public override fun valuesRow(): Row6<Long?, Long?, Long?, Long?, BigDecimal?, LocalDateTime?> = super.valuesRow() as Row6<Long?, Long?, Long?, Long?, BigDecimal?, LocalDateTime?>
    public override fun field1(): Field<Long?> = PaymentP2007_02.PAYMENT_P2007_02.PAYMENT_ID
    public override fun field2(): Field<Long?> = PaymentP2007_02.PAYMENT_P2007_02.CUSTOMER_ID
    public override fun field3(): Field<Long?> = PaymentP2007_02.PAYMENT_P2007_02.STAFF_ID
    public override fun field4(): Field<Long?> = PaymentP2007_02.PAYMENT_P2007_02.RENTAL_ID
    public override fun field5(): Field<BigDecimal?> = PaymentP2007_02.PAYMENT_P2007_02.AMOUNT
    public override fun field6(): Field<LocalDateTime?> = PaymentP2007_02.PAYMENT_P2007_02.PAYMENT_DATE
    public override fun component1(): Long? = paymentId
    public override fun component2(): Long? = customerId
    public override fun component3(): Long? = staffId
    public override fun component4(): Long? = rentalId
    public override fun component5(): BigDecimal? = amount
    public override fun component6(): LocalDateTime? = paymentDate
    public override fun value1(): Long? = paymentId
    public override fun value2(): Long? = customerId
    public override fun value3(): Long? = staffId
    public override fun value4(): Long? = rentalId
    public override fun value5(): BigDecimal? = amount
    public override fun value6(): LocalDateTime? = paymentDate

    public override fun value1(value: Long?): PaymentP2007_02Record {
        set(0, value)
        return this
    }

    public override fun value2(value: Long?): PaymentP2007_02Record {
        set(1, value)
        return this
    }

    public override fun value3(value: Long?): PaymentP2007_02Record {
        set(2, value)
        return this
    }

    public override fun value4(value: Long?): PaymentP2007_02Record {
        set(3, value)
        return this
    }

    public override fun value5(value: BigDecimal?): PaymentP2007_02Record {
        set(4, value)
        return this
    }

    public override fun value6(value: LocalDateTime?): PaymentP2007_02Record {
        set(5, value)
        return this
    }

    public override fun values(value1: Long?, value2: Long?, value3: Long?, value4: Long?, value5: BigDecimal?, value6: LocalDateTime?): PaymentP2007_02Record {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised PaymentP2007_02Record
     */
    constructor(paymentId: Long? = null, customerId: Long? = null, staffId: Long? = null, rentalId: Long? = null, amount: BigDecimal? = null, paymentDate: LocalDateTime? = null): this() {
        this.paymentId = paymentId
        this.customerId = customerId
        this.staffId = staffId
        this.rentalId = rentalId
        this.amount = amount
        this.paymentDate = paymentDate
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised PaymentP2007_02Record
     */
    constructor(value: org.jooq.demo.kotlin.db.tables.pojos.PaymentP2007_02?): this() {
        if (value != null) {
            this.paymentId = value.paymentId
            this.customerId = value.customerId
            this.staffId = value.staffId
            this.rentalId = value.rentalId
            this.amount = value.amount
            this.paymentDate = value.paymentDate
            resetChangedOnNotNull()
        }
    }
}
