/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables


import java.math.BigDecimal
import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.demo.kotlin.db.Public
import org.jooq.demo.kotlin.db.tables.records.SalesByFilmCategoryRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SalesByFilmCategory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SalesByFilmCategoryRecord>?,
    aliased: Table<SalesByFilmCategoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SalesByFilmCategoryRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "sales_by_film_category" as  SELECT c.name AS category,
      sum(p.amount) AS total_sales
     FROM (((((payment p
       JOIN rental r ON ((p.rental_id = r.rental_id)))
       JOIN inventory i ON ((r.inventory_id = i.inventory_id)))
       JOIN film f ON ((i.film_id = f.film_id)))
       JOIN film_category fc ON ((f.film_id = fc.film_id)))
       JOIN category c ON ((fc.category_id = c.category_id)))
    GROUP BY c.name
    ORDER BY (sum(p.amount)) DESC;
    """)
) {
    companion object {

        /**
         * The reference instance of <code>public.sales_by_film_category</code>
         */
        val SALES_BY_FILM_CATEGORY: SalesByFilmCategory = SalesByFilmCategory()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<SalesByFilmCategoryRecord> = SalesByFilmCategoryRecord::class.java

    /**
     * The column <code>public.sales_by_film_category.category</code>.
     */
    val CATEGORY: TableField<SalesByFilmCategoryRecord, String?> = createField(DSL.name("category"), SQLDataType.VARCHAR(25), this, "")

    /**
     * The column <code>public.sales_by_film_category.total_sales</code>.
     */
    val TOTAL_SALES: TableField<SalesByFilmCategoryRecord, BigDecimal?> = createField(DSL.name("total_sales"), SQLDataType.NUMERIC, this, "")

    private constructor(alias: Name, aliased: Table<SalesByFilmCategoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SalesByFilmCategoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.sales_by_film_category</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.sales_by_film_category</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.sales_by_film_category</code> table reference
     */
    constructor(): this(DSL.name("sales_by_film_category"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SalesByFilmCategoryRecord>): this(Internal.createPathAlias(child, key), child, key, SALES_BY_FILM_CATEGORY, null)
    public override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    public override fun `as`(alias: String): SalesByFilmCategory = SalesByFilmCategory(DSL.name(alias), this)
    public override fun `as`(alias: Name): SalesByFilmCategory = SalesByFilmCategory(alias, this)
    public override fun `as`(alias: Table<*>): SalesByFilmCategory = SalesByFilmCategory(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): SalesByFilmCategory = SalesByFilmCategory(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): SalesByFilmCategory = SalesByFilmCategory(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): SalesByFilmCategory = SalesByFilmCategory(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    public override fun fieldsRow(): Row2<String?, BigDecimal?> = super.fieldsRow() as Row2<String?, BigDecimal?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?, BigDecimal?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?, BigDecimal?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
