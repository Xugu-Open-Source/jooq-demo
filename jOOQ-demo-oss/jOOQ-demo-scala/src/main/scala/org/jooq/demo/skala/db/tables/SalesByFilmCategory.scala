/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables


import java.lang.Class
import java.lang.String
import java.math.BigDecimal
import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.demo.skala.db.Public
import org.jooq.demo.skala.db.tables.records.SalesByFilmCategoryRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array


object SalesByFilmCategory {

  /**
   * The reference instance of <code>public.sales_by_film_category</code>
   */
  val SALES_BY_FILM_CATEGORY = new SalesByFilmCategory
}

/**
 * This class is generated by jOOQ.
 */
class SalesByFilmCategory(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, SalesByFilmCategoryRecord],
  aliased: Table[SalesByFilmCategoryRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[SalesByFilmCategoryRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.view("""
  create view "sales_by_film_category" as  SELECT c.name AS category,
    sum(p.amount) AS total_sales
   FROM (((((payment p
     JOIN rental r ON ((p.rental_id = r.rental_id)))
     JOIN inventory i ON ((r.inventory_id = i.inventory_id)))
     JOIN film f ON ((i.film_id = f.film_id)))
     JOIN film_category fc ON ((f.film_id = fc.film_id)))
     JOIN category c ON ((fc.category_id = c.category_id)))
  GROUP BY c.name
  ORDER BY (sum(p.amount)) DESC;
  """)
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[SalesByFilmCategoryRecord] = classOf[SalesByFilmCategoryRecord]

  /**
   * The column <code>public.sales_by_film_category.category</code>.
   */
  val CATEGORY: TableField[SalesByFilmCategoryRecord, String] = createField(DSL.name("category"), SQLDataType.VARCHAR(25), "")

  /**
   * The column <code>public.sales_by_film_category.total_sales</code>.
   */
  val TOTAL_SALES: TableField[SalesByFilmCategoryRecord, BigDecimal] = createField(DSL.name("total_sales"), SQLDataType.NUMERIC, "")

  private def this(alias: Name, aliased: Table[SalesByFilmCategoryRecord]) = this(alias, null, null, aliased, null)

  /**
   * Create an aliased <code>public.sales_by_film_category</code> table
   * reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.demo.skala.db.tables.SalesByFilmCategory.SALES_BY_FILM_CATEGORY)

  /**
   * Create an aliased <code>public.sales_by_film_category</code> table
   * reference
   */
  def this(alias: Name) = this(alias, org.jooq.demo.skala.db.tables.SalesByFilmCategory.SALES_BY_FILM_CATEGORY)

  /**
   * Create a <code>public.sales_by_film_category</code> table reference
   */
  def this() = this(DSL.name("sales_by_film_category"), null)

  def this(child: Table[_ <: Record], key: ForeignKey[_ <: Record, SalesByFilmCategoryRecord]) = this(Internal.createPathAlias(child, key), child, key, org.jooq.demo.skala.db.tables.SalesByFilmCategory.SALES_BY_FILM_CATEGORY, null)

  override def getSchema: Schema = if (aliased()) null else Public.PUBLIC
  override def as(alias: String): SalesByFilmCategory = new SalesByFilmCategory(DSL.name(alias), this)
  override def as(alias: Name): SalesByFilmCategory = new SalesByFilmCategory(alias, this)
  override def as(alias: Table[_]): SalesByFilmCategory = new SalesByFilmCategory(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): SalesByFilmCategory = new SalesByFilmCategory(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): SalesByFilmCategory = new SalesByFilmCategory(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[_]): SalesByFilmCategory = new SalesByFilmCategory(name.getQualifiedName(), null)

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row2[String, BigDecimal] = super.fieldsRow.asInstanceOf[ Row2[String, BigDecimal] ]

  /**
   * Convenience mapping calling {@link #convertFrom(Function)}.
   */
  def mapping[U](from: (String, BigDecimal) => U): SelectField[U] = convertFrom(r => from.apply(r.value1(), r.value2()))

  /**
   * Convenience mapping calling {@link #convertFrom(Class, Function)}.
   */
  def mapping[U](toType: Class[U], from: (String, BigDecimal) => U): SelectField[U] = convertFrom(toType,r => from.apply(r.value1(), r.value2()))
}
