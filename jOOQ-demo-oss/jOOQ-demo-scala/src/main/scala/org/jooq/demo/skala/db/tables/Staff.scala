/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables


import java.lang.Boolean
import java.lang.Class
import java.lang.Long
import java.lang.String
import java.time.LocalDateTime
import java.util.Arrays
import java.util.List
import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row11
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.demo.skala.db.Keys
import org.jooq.demo.skala.db.Public
import org.jooq.demo.skala.db.tables.records.StaffRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array
import scala.Byte


object Staff {

  /**
   * The reference instance of <code>public.staff</code>
   */
  val STAFF = new Staff
}

/**
 * This class is generated by jOOQ.
 */
class Staff(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, StaffRecord],
  aliased: Table[StaffRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[StaffRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[StaffRecord] = classOf[StaffRecord]

  /**
   * The column <code>public.staff.staff_id</code>.
   */
  val STAFF_ID: TableField[StaffRecord, Long] = createField(DSL.name("staff_id"), SQLDataType.BIGINT.nullable(false).identity(true), "")

  /**
   * The column <code>public.staff.first_name</code>.
   */
  val FIRST_NAME: TableField[StaffRecord, String] = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45).nullable(false), "")

  /**
   * The column <code>public.staff.last_name</code>.
   */
  val LAST_NAME: TableField[StaffRecord, String] = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45).nullable(false), "")

  /**
   * The column <code>public.staff.address_id</code>.
   */
  val ADDRESS_ID: TableField[StaffRecord, Long] = createField(DSL.name("address_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.staff.email</code>.
   */
  val EMAIL: TableField[StaffRecord, String] = createField(DSL.name("email"), SQLDataType.VARCHAR(50), "")

  /**
   * The column <code>public.staff.store_id</code>.
   */
  val STORE_ID: TableField[StaffRecord, Long] = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.staff.active</code>.
   */
  val ACTIVE: TableField[StaffRecord, Boolean] = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), "")

  /**
   * The column <code>public.staff.username</code>.
   */
  val USERNAME: TableField[StaffRecord, String] = createField(DSL.name("username"), SQLDataType.VARCHAR(16).nullable(false), "")

  /**
   * The column <code>public.staff.password</code>.
   */
  val PASSWORD: TableField[StaffRecord, String] = createField(DSL.name("password"), SQLDataType.VARCHAR(40), "")

  /**
   * The column <code>public.staff.last_update</code>.
   */
  val LAST_UPDATE: TableField[StaffRecord, LocalDateTime] = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), "")

  /**
   * The column <code>public.staff.picture</code>.
   */
  val PICTURE: TableField[StaffRecord, Array[Byte]] = createField(DSL.name("picture"), SQLDataType.BLOB, "")

  private def this(alias: Name, aliased: Table[StaffRecord]) = this(alias, null, null, aliased, null)

  /**
   * Create an aliased <code>public.staff</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.demo.skala.db.tables.Staff.STAFF)

  /**
   * Create an aliased <code>public.staff</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.demo.skala.db.tables.Staff.STAFF)

  /**
   * Create a <code>public.staff</code> table reference
   */
  def this() = this(DSL.name("staff"), null)

  def this(child: Table[_ <: Record], key: ForeignKey[_ <: Record, StaffRecord]) = this(Internal.createPathAlias(child, key), child, key, org.jooq.demo.skala.db.tables.Staff.STAFF, null)

  override def getSchema: Schema = if (aliased()) null else Public.PUBLIC

  override def getIdentity: Identity[StaffRecord, Long] = super.getIdentity.asInstanceOf[ Identity[StaffRecord, Long] ]

  override def getPrimaryKey: UniqueKey[StaffRecord] = Keys.STAFF_PKEY

  override def getReferences: List[ ForeignKey[StaffRecord, _] ] = Arrays.asList[ ForeignKey[StaffRecord, _] ](Keys.STAFF__STAFF_ADDRESS_ID_FKEY, Keys.STAFF__STAFF_STORE_ID_FKEY)

  /**
   * Get the implicit join path to the <code>public.address</code> table.
   */
  lazy val address: Address = { new Address(this, Keys.STAFF__STAFF_ADDRESS_ID_FKEY) }

  /**
   * Get the implicit join path to the <code>public.store</code> table.
   */
  lazy val store: Store = { new Store(this, Keys.STAFF__STAFF_STORE_ID_FKEY) }
  override def as(alias: String): Staff = new Staff(DSL.name(alias), this)
  override def as(alias: Name): Staff = new Staff(alias, this)
  override def as(alias: Table[_]): Staff = new Staff(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): Staff = new Staff(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Staff = new Staff(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[_]): Staff = new Staff(name.getQualifiedName(), null)

  // -------------------------------------------------------------------------
  // Row11 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row11[Long, String, String, Long, String, Long, Boolean, String, String, LocalDateTime, Array[Byte]] = super.fieldsRow.asInstanceOf[ Row11[Long, String, String, Long, String, Long, Boolean, String, String, LocalDateTime, Array[Byte]] ]

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
   */
  def mapping[U](from: (Long, String, String, Long, String, Long, Boolean, String, String, LocalDateTime, Array[Byte]) => U): SelectField[U] = convertFrom(r => from.apply(r.value1(), r.value2(), r.value3(), r.value4(), r.value5(), r.value6(), r.value7(), r.value8(), r.value9(), r.value10(), r.value11()))

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Class,
   * Function)}.
   */
  def mapping[U](toType: Class[U], from: (Long, String, String, Long, String, Long, Boolean, String, String, LocalDateTime, Array[Byte]) => U): SelectField[U] = convertFrom(toType,r => from.apply(r.value1(), r.value2(), r.value3(), r.value4(), r.value5(), r.value6(), r.value7(), r.value8(), r.value9(), r.value10(), r.value11()))
}
