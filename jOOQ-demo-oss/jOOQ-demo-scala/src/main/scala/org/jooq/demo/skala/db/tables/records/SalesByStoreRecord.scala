/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.records


import java.lang.String
import java.math.BigDecimal

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.demo.skala.db.tables.SalesByStore
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
class SalesByStoreRecord extends TableRecordImpl[SalesByStoreRecord](SalesByStore.SALES_BY_STORE) with Record3[String, String, BigDecimal] {

  /**
   * Setter for <code>public.sales_by_store.store</code>.
   */
  def setStore(value: String): Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>public.sales_by_store.store</code>.
   */
  def getStore: String = get(0).asInstanceOf[String]

  /**
   * Setter for <code>public.sales_by_store.manager</code>.
   */
  def setManager(value: String): Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>public.sales_by_store.manager</code>.
   */
  def getManager: String = get(1).asInstanceOf[String]

  /**
   * Setter for <code>public.sales_by_store.total_sales</code>.
   */
  def setTotalSales(value: BigDecimal): Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>public.sales_by_store.total_sales</code>.
   */
  def getTotalSales: BigDecimal = get(2).asInstanceOf[BigDecimal]

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow: Row3[String, String, BigDecimal] = super.fieldsRow.asInstanceOf[ Row3[String, String, BigDecimal] ]

  override def valuesRow: Row3[String, String, BigDecimal] = super.valuesRow.asInstanceOf[ Row3[String, String, BigDecimal] ]
  override def field1: Field[String] = SalesByStore.SALES_BY_STORE.STORE
  override def field2: Field[String] = SalesByStore.SALES_BY_STORE.MANAGER
  override def field3: Field[BigDecimal] = SalesByStore.SALES_BY_STORE.TOTAL_SALES
  override def component1: String = getStore
  override def component2: String = getManager
  override def component3: BigDecimal = getTotalSales
  override def value1: String = getStore
  override def value2: String = getManager
  override def value3: BigDecimal = getTotalSales

  override def value1(value: String): SalesByStoreRecord = {
    setStore(value)
    this
  }

  override def value2(value: String): SalesByStoreRecord = {
    setManager(value)
    this
  }

  override def value3(value: BigDecimal): SalesByStoreRecord = {
    setTotalSales(value)
    this
  }

  override def values(value1 : String, value2 : String, value3 : BigDecimal): SalesByStoreRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this
  }

  /**
   * Create a detached, initialised SalesByStoreRecord
   */
  def this(store : String, manager : String, totalSales : BigDecimal) = {
    this()

    this.setStore(store)
    this.setManager(manager)
    this.setTotalSales(totalSales)
  }

  /**
   * Create a detached, initialised SalesByStoreRecord
   */
  def this(value: org.jooq.demo.skala.db.tables.pojos.SalesByStore) = {
    this()

    if (value != null) {
      this.setStore(value.getStore)
      this.setManager(value.getManager)
      this.setTotalSales(value.getTotalSales)
    }
  }
}
