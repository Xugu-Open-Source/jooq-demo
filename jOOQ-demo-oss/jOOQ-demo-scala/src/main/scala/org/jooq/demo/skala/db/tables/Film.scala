/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables


import java.lang.Class
import java.lang.Deprecated
import java.lang.Integer
import java.lang.Long
import java.lang.Object
import java.lang.Short
import java.lang.String
import java.math.BigDecimal
import java.time.LocalDateTime
import java.util.Arrays
import java.util.List
import java.util.function.Function

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Result
import org.jooq.Row14
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableLike
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.demo.skala.db.Indexes
import org.jooq.demo.skala.db.Keys
import org.jooq.demo.skala.db.Public
import org.jooq.demo.skala.db.enums.MpaaRating
import org.jooq.demo.skala.db.tables.records.ActorRecord
import org.jooq.demo.skala.db.tables.records.CategoryRecord
import org.jooq.demo.skala.db.tables.records.FilmActorRecord
import org.jooq.demo.skala.db.tables.records.FilmCategoryRecord
import org.jooq.demo.skala.db.tables.records.FilmRecord
import org.jooq.demo.skala.db.tables.records.InventoryRecord
import org.jooq.demo.skala.db.tables.records.LanguageRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array


object Film {

  /**
   * The reference instance of <code>public.film</code>
   */
  val FILM = new Film
}

/**
 * This class is generated by jOOQ.
 */
class Film(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, FilmRecord],
  aliased: Table[FilmRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[FilmRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[FilmRecord] = classOf[FilmRecord]

  /**
   * The column <code>public.film.film_id</code>.
   */
  val FILM_ID: TableField[FilmRecord, Long] = createField(DSL.name("film_id"), SQLDataType.BIGINT.nullable(false).identity(true), "")

  /**
   * The column <code>public.film.title</code>.
   */
  val TITLE: TableField[FilmRecord, String] = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), "")

  /**
   * The column <code>public.film.description</code>.
   */
  val DESCRIPTION: TableField[FilmRecord, String] = createField(DSL.name("description"), SQLDataType.CLOB, "")

  /**
   * The column <code>public.film.release_year</code>.
   */
  val RELEASE_YEAR: TableField[FilmRecord, Integer] = createField(DSL.name("release_year"), org.jooq.demo.skala.db.Domains.YEAR.getDataType(), "")

  /**
   * The column <code>public.film.language_id</code>.
   */
  val LANGUAGE_ID: TableField[FilmRecord, Long] = createField(DSL.name("language_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.film.original_language_id</code>.
   */
  val ORIGINAL_LANGUAGE_ID: TableField[FilmRecord, Long] = createField(DSL.name("original_language_id"), SQLDataType.BIGINT, "")

  /**
   * The column <code>public.film.rental_duration</code>.
   */
  val RENTAL_DURATION: TableField[FilmRecord, Short] = createField(DSL.name("rental_duration"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("3", SQLDataType.SMALLINT)), "")

  /**
   * The column <code>public.film.rental_rate</code>.
   */
  val RENTAL_RATE: TableField[FilmRecord, BigDecimal] = createField(DSL.name("rental_rate"), SQLDataType.NUMERIC(4, 2).nullable(false).defaultValue(DSL.field("4.99", SQLDataType.NUMERIC)), "")

  /**
   * The column <code>public.film.length</code>.
   */
  val LENGTH: TableField[FilmRecord, Short] = createField(DSL.name("length"), SQLDataType.SMALLINT, "")

  /**
   * The column <code>public.film.replacement_cost</code>.
   */
  val REPLACEMENT_COST: TableField[FilmRecord, BigDecimal] = createField(DSL.name("replacement_cost"), SQLDataType.NUMERIC(5, 2).nullable(false).defaultValue(DSL.field("19.99", SQLDataType.NUMERIC)), "")

  /**
   * The column <code>public.film.rating</code>.
   */
  val RATING: TableField[FilmRecord, MpaaRating] = createField(DSL.name("rating"), SQLDataType.VARCHAR.defaultValue(DSL.field("'G'::mpaa_rating", SQLDataType.VARCHAR)).asEnumDataType(classOf[org.jooq.demo.skala.db.enums.MpaaRating]), "")

  /**
   * The column <code>public.film.last_update</code>.
   */
  val LAST_UPDATE: TableField[FilmRecord, LocalDateTime] = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), "")

  /**
   * The column <code>public.film.special_features</code>.
   */
  val SPECIAL_FEATURES: TableField[FilmRecord, Array[String]] = createField(DSL.name("special_features"), SQLDataType.CLOB.getArrayDataType(), "")

  /**
   * @deprecated Unknown data type. If this is a qualified, user-defined type,
   * it may have been excluded from code generation. If this is a built-in type,
   * you can define an explicit {@link org.jooq.Binding} to specify how this
   * type should be handled. Deprecation can be turned off using {@literal
   * <deprecationOnUnknownTypes/>} in your code generator configuration.
   */
  @Deprecated
  val FULLTEXT: TableField[FilmRecord, Object] = createField(DSL.name("fulltext"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tsvector\"").nullable(false), "")

  private def this(alias: Name, aliased: Table[FilmRecord]) = this(alias, null, null, aliased, null)

  /**
   * Create an aliased <code>public.film</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.demo.skala.db.tables.Film.FILM)

  /**
   * Create an aliased <code>public.film</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.demo.skala.db.tables.Film.FILM)

  /**
   * Create a <code>public.film</code> table reference
   */
  def this() = this(DSL.name("film"), null)

  def this(child: Table[_ <: Record], key: ForeignKey[_ <: Record, FilmRecord]) = this(Internal.createPathAlias(child, key), child, key, org.jooq.demo.skala.db.tables.Film.FILM, null)

  override def getSchema: Schema = if (aliased()) null else Public.PUBLIC

  override def getIndexes: List[Index] = Arrays.asList[ Index ](Indexes.FILM_FULLTEXT_IDX, Indexes.IDX_FK_LANGUAGE_ID, Indexes.IDX_FK_ORIGINAL_LANGUAGE_ID, Indexes.IDX_TITLE)

  override def getIdentity: Identity[FilmRecord, Long] = super.getIdentity.asInstanceOf[ Identity[FilmRecord, Long] ]

  override def getPrimaryKey: UniqueKey[FilmRecord] = Keys.FILM_PKEY

  override def getReferences: List[ ForeignKey[FilmRecord, _] ] = Arrays.asList[ ForeignKey[FilmRecord, _] ](Keys.FILM__FILM_LANGUAGE_ID_FKEY, Keys.FILM__FILM_ORIGINAL_LANGUAGE_ID_FKEY)

  /**
   * Get the implicit join path to the <code>public.language</code> table, via
   * the <code>film_language_id_fkey</code> key.
   */
  lazy val filmLanguageIdFkey: Language = { new Language(this, Keys.FILM__FILM_LANGUAGE_ID_FKEY) }

  /**
   * Get the implicit join path to the <code>public.language</code> table, via
   * the <code>film_original_language_id_fkey</code> key.
   */
  lazy val filmOriginalLanguageIdFkey: Language = { new Language(this, Keys.FILM__FILM_ORIGINAL_LANGUAGE_ID_FKEY) }

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.film_actor</code> one-to-many child table.
   */
  def filmActorExists(): Condition = filmActorExists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.film_actor</code> one-to-many child table.
   */
  def filmActorExists[O <: Record](subquery: (FilmActor) => TableLike[O]): Condition = oneToManyExists(Keys.FILM_ACTOR__FILM_ACTOR_FILM_ID_FKEY, (t: Table[FilmActorRecord]) => subquery(t.asInstanceOf[FilmActor]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.film_category</code> one-to-many child table.
   */
  def filmCategoryExists(): Condition = filmCategoryExists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.film_category</code> one-to-many child table.
   */
  def filmCategoryExists[O <: Record](subquery: (FilmCategory) => TableLike[O]): Condition = oneToManyExists(Keys.FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY, (t: Table[FilmCategoryRecord]) => subquery(t.asInstanceOf[FilmCategory]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.inventory</code> one-to-many child table.
   */
  def inventoryExists(): Condition = inventoryExists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.inventory</code> one-to-many child table.
   */
  def inventoryExists[O <: Record](subquery: (Inventory) => TableLike[O]): Condition = oneToManyExists(Keys.INVENTORY__INVENTORY_FILM_ID_FKEY, (t: Table[InventoryRecord]) => subquery(t.asInstanceOf[Inventory]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.actor</code> many-to-many child table.
   */
  def actorExists(): Condition = actorExists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.actor</code> many-to-many child table.
   */
  def actorExists[O <: Record](subquery: (Actor) => TableLike[O]): Condition = manyToManyExists(Keys.FILM_ACTOR__FILM_ACTOR_FILM_ID_FKEY, Keys.FILM_ACTOR__FILM_ACTOR_ACTOR_ID_FKEY, (t: Table[ActorRecord]) => subquery(t.asInstanceOf[Actor]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.category</code> many-to-many child table.
   */
  def categoryExists(): Condition = categoryExists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.category</code> many-to-many child table.
   */
  def categoryExists[O <: Record](subquery: (Category) => TableLike[O]): Condition = manyToManyExists(Keys.FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY, Keys.FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY, (t: Table[CategoryRecord]) => subquery(t.asInstanceOf[Category]))

  /**
   * A convenience constructor for correlated <code>ROW</code>s expressions to
   * the <code>public.film</code> to-one parent table.
   */
  def filmLanguageIdFkeyRow(): Field[LanguageRecord] = filmLanguageIdFkeyRow(t => t)

  /**
   * A convenience constructor for correlated <code>ROW</code>s expressions to
   * the <code>public.film</code> to-one parent table.
   */
  def filmLanguageIdFkeyRow[O <: Record](subquery: (Language) => TableLike[O]): Field[O] = toOneRow(Keys.FILM__FILM_LANGUAGE_ID_FKEY, (t: Table[LanguageRecord]) => subquery(t.asInstanceOf[Language]))

  /**
   * A convenience constructor for correlated <code>ROW</code>s expressions to
   * the <code>public.film</code> to-one parent table.
   */
  def filmOriginalLanguageIdFkeyRow(): Field[LanguageRecord] = filmOriginalLanguageIdFkeyRow(t => t)

  /**
   * A convenience constructor for correlated <code>ROW</code>s expressions to
   * the <code>public.film</code> to-one parent table.
   */
  def filmOriginalLanguageIdFkeyRow[O <: Record](subquery: (Language) => TableLike[O]): Field[O] = toOneRow(Keys.FILM__FILM_ORIGINAL_LANGUAGE_ID_FKEY, (t: Table[LanguageRecord]) => subquery(t.asInstanceOf[Language]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.film_actor</code> one-to-many child table.
   */
  def filmActorMultiset(): Field[Result[FilmActorRecord]] = filmActorMultiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.film_actor</code> one-to-many child table.
   */
  def filmActorMultiset[O <: Record](subquery: (FilmActor) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.FILM_ACTOR__FILM_ACTOR_FILM_ID_FKEY, (t: Table[FilmActorRecord]) => subquery(t.asInstanceOf[FilmActor]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.film_category</code> one-to-many child table.
   */
  def filmCategoryMultiset(): Field[Result[FilmCategoryRecord]] = filmCategoryMultiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.film_category</code> one-to-many child table.
   */
  def filmCategoryMultiset[O <: Record](subquery: (FilmCategory) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY, (t: Table[FilmCategoryRecord]) => subquery(t.asInstanceOf[FilmCategory]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.inventory</code> one-to-many child table.
   */
  def inventoryMultiset(): Field[Result[InventoryRecord]] = inventoryMultiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.inventory</code> one-to-many child table.
   */
  def inventoryMultiset[O <: Record](subquery: (Inventory) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.INVENTORY__INVENTORY_FILM_ID_FKEY, (t: Table[InventoryRecord]) => subquery(t.asInstanceOf[Inventory]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.actor</code> many-to-many child table.
   */
  def actorMultiset(): Field[Result[ActorRecord]] = actorMultiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.actor</code> many-to-many child table.
   */
  def actorMultiset[O <: Record](subquery: (Actor) => TableLike[O]): Field[Result[O]] = manyToManyMultiset(Keys.FILM_ACTOR__FILM_ACTOR_FILM_ID_FKEY, Keys.FILM_ACTOR__FILM_ACTOR_ACTOR_ID_FKEY, (t: Table[ActorRecord]) => subquery(t.asInstanceOf[Actor]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.category</code> many-to-many child table.
   */
  def categoryMultiset(): Field[Result[CategoryRecord]] = categoryMultiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.category</code> many-to-many child table.
   */
  def categoryMultiset[O <: Record](subquery: (Category) => TableLike[O]): Field[Result[O]] = manyToManyMultiset(Keys.FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY, Keys.FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY, (t: Table[CategoryRecord]) => subquery(t.asInstanceOf[Category]))
  override def as(alias: String): Film = new Film(DSL.name(alias), this)
  override def as(alias: Name): Film = new Film(alias, this)
  override def as(alias: Table[_]): Film = new Film(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): Film = new Film(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Film = new Film(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[_]): Film = new Film(name.getQualifiedName(), null)

  // -------------------------------------------------------------------------
  // Row14 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row14[Long, String, String, Integer, Long, Long, Short, BigDecimal, Short, BigDecimal, MpaaRating, LocalDateTime, Array[String], Object] = super.fieldsRow.asInstanceOf[ Row14[Long, String, String, Integer, Long, Long, Short, BigDecimal, Short, BigDecimal, MpaaRating, LocalDateTime, Array[String], Object] ]

  /**
   * Convenience mapping calling {@link #convertFrom(Function)}.
   */
  def mapping[U](from: (Long, String, String, Integer, Long, Long, Short, BigDecimal, Short, BigDecimal, MpaaRating, LocalDateTime, Array[String], Object) => U): SelectField[U] = convertFrom(r => from.apply(r.value1(), r.value2(), r.value3(), r.value4(), r.value5(), r.value6(), r.value7(), r.value8(), r.value9(), r.value10(), r.value11(), r.value12(), r.value13(), r.value14()))

  /**
   * Convenience mapping calling {@link #convertFrom(Class, Function)}.
   */
  def mapping[U](toType: Class[U], from: (Long, String, String, Integer, Long, Long, Short, BigDecimal, Short, BigDecimal, MpaaRating, LocalDateTime, Array[String], Object) => U): SelectField[U] = convertFrom(toType,r => from.apply(r.value1(), r.value2(), r.value3(), r.value4(), r.value5(), r.value6(), r.value7(), r.value8(), r.value9(), r.value10(), r.value11(), r.value12(), r.value13(), r.value14()))
}
