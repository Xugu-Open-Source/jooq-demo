/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.records


import java.lang.Boolean
import java.lang.Long
import java.lang.String
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.demo.skala.db.tables.Staff
import org.jooq.impl.UpdatableRecordImpl

import scala.Array
import scala.Byte


/**
 * This class is generated by jOOQ.
 */
class StaffRecord extends UpdatableRecordImpl[StaffRecord](Staff.STAFF) with Record11[Long, String, String, Long, String, Long, Boolean, String, String, LocalDateTime, Array[Byte]] {

  /**
   * Setter for <code>public.staff.staff_id</code>.
   */
  def setStaffId(value: Long): Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>public.staff.staff_id</code>.
   */
  def getStaffId: Long = get(0).asInstanceOf[Long]

  /**
   * Setter for <code>public.staff.first_name</code>.
   */
  def setFirstName(value: String): Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>public.staff.first_name</code>.
   */
  def getFirstName: String = get(1).asInstanceOf[String]

  /**
   * Setter for <code>public.staff.last_name</code>.
   */
  def setLastName(value: String): Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>public.staff.last_name</code>.
   */
  def getLastName: String = get(2).asInstanceOf[String]

  /**
   * Setter for <code>public.staff.address_id</code>.
   */
  def setAddressId(value: Long): Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>public.staff.address_id</code>.
   */
  def getAddressId: Long = get(3).asInstanceOf[Long]

  /**
   * Setter for <code>public.staff.email</code>.
   */
  def setEmail(value: String): Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>public.staff.email</code>.
   */
  def getEmail: String = get(4).asInstanceOf[String]

  /**
   * Setter for <code>public.staff.store_id</code>.
   */
  def setStoreId(value: Long): Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>public.staff.store_id</code>.
   */
  def getStoreId: Long = get(5).asInstanceOf[Long]

  /**
   * Setter for <code>public.staff.active</code>.
   */
  def setActive(value: Boolean): Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>public.staff.active</code>.
   */
  def getActive: Boolean = get(6).asInstanceOf[Boolean]

  /**
   * Setter for <code>public.staff.username</code>.
   */
  def setUsername(value: String): Unit = {
    set(7, value)
  }

  /**
   * Getter for <code>public.staff.username</code>.
   */
  def getUsername: String = get(7).asInstanceOf[String]

  /**
   * Setter for <code>public.staff.password</code>.
   */
  def setPassword(value: String): Unit = {
    set(8, value)
  }

  /**
   * Getter for <code>public.staff.password</code>.
   */
  def getPassword: String = get(8).asInstanceOf[String]

  /**
   * Setter for <code>public.staff.last_update</code>.
   */
  def setLastUpdate(value: LocalDateTime): Unit = {
    set(9, value)
  }

  /**
   * Getter for <code>public.staff.last_update</code>.
   */
  def getLastUpdate: LocalDateTime = get(9).asInstanceOf[LocalDateTime]

  /**
   * Setter for <code>public.staff.picture</code>.
   */
  def setPicture(value: Array[Byte]): Unit = {
    set(10, value)
  }

  /**
   * Getter for <code>public.staff.picture</code>.
   */
  def getPicture: Array[Byte] = get(10).asInstanceOf[Array[Byte]]

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override def key: Record1[Long] = super.key.asInstanceOf[ Record1[Long] ]

  // -------------------------------------------------------------------------
  // Record11 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow: Row11[Long, String, String, Long, String, Long, Boolean, String, String, LocalDateTime, Array[Byte]] = super.fieldsRow.asInstanceOf[ Row11[Long, String, String, Long, String, Long, Boolean, String, String, LocalDateTime, Array[Byte]] ]

  override def valuesRow: Row11[Long, String, String, Long, String, Long, Boolean, String, String, LocalDateTime, Array[Byte]] = super.valuesRow.asInstanceOf[ Row11[Long, String, String, Long, String, Long, Boolean, String, String, LocalDateTime, Array[Byte]] ]
  override def field1: Field[Long] = Staff.STAFF.STAFF_ID
  override def field2: Field[String] = Staff.STAFF.FIRST_NAME
  override def field3: Field[String] = Staff.STAFF.LAST_NAME
  override def field4: Field[Long] = Staff.STAFF.ADDRESS_ID
  override def field5: Field[String] = Staff.STAFF.EMAIL
  override def field6: Field[Long] = Staff.STAFF.STORE_ID
  override def field7: Field[Boolean] = Staff.STAFF.ACTIVE
  override def field8: Field[String] = Staff.STAFF.USERNAME
  override def field9: Field[String] = Staff.STAFF.PASSWORD
  override def field10: Field[LocalDateTime] = Staff.STAFF.LAST_UPDATE
  override def field11: Field[Array[Byte]] = Staff.STAFF.PICTURE
  override def component1: Long = getStaffId
  override def component2: String = getFirstName
  override def component3: String = getLastName
  override def component4: Long = getAddressId
  override def component5: String = getEmail
  override def component6: Long = getStoreId
  override def component7: Boolean = getActive
  override def component8: String = getUsername
  override def component9: String = getPassword
  override def component10: LocalDateTime = getLastUpdate
  override def component11: Array[Byte] = getPicture
  override def value1: Long = getStaffId
  override def value2: String = getFirstName
  override def value3: String = getLastName
  override def value4: Long = getAddressId
  override def value5: String = getEmail
  override def value6: Long = getStoreId
  override def value7: Boolean = getActive
  override def value8: String = getUsername
  override def value9: String = getPassword
  override def value10: LocalDateTime = getLastUpdate
  override def value11: Array[Byte] = getPicture

  override def value1(value: Long): StaffRecord = {
    setStaffId(value)
    this
  }

  override def value2(value: String): StaffRecord = {
    setFirstName(value)
    this
  }

  override def value3(value: String): StaffRecord = {
    setLastName(value)
    this
  }

  override def value4(value: Long): StaffRecord = {
    setAddressId(value)
    this
  }

  override def value5(value: String): StaffRecord = {
    setEmail(value)
    this
  }

  override def value6(value: Long): StaffRecord = {
    setStoreId(value)
    this
  }

  override def value7(value: Boolean): StaffRecord = {
    setActive(value)
    this
  }

  override def value8(value: String): StaffRecord = {
    setUsername(value)
    this
  }

  override def value9(value: String): StaffRecord = {
    setPassword(value)
    this
  }

  override def value10(value: LocalDateTime): StaffRecord = {
    setLastUpdate(value)
    this
  }

  override def value11(value: Array[Byte]): StaffRecord = {
    setPicture(value)
    this
  }

  override def values(value1 : Long, value2 : String, value3 : String, value4 : Long, value5 : String, value6 : Long, value7 : Boolean, value8 : String, value9 : String, value10 : LocalDateTime, value11 : Array[Byte]): StaffRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this.value8(value8)
    this.value9(value9)
    this.value10(value10)
    this.value11(value11)
    this
  }

  /**
   * Create a detached, initialised StaffRecord
   */
  def this(staffId : Long, firstName : String, lastName : String, addressId : Long, email : String, storeId : Long, active : Boolean, username : String, password : String, lastUpdate : LocalDateTime, picture : Array[Byte]) = {
    this()

    this.setStaffId(staffId)
    this.setFirstName(firstName)
    this.setLastName(lastName)
    this.setAddressId(addressId)
    this.setEmail(email)
    this.setStoreId(storeId)
    this.setActive(active)
    this.setUsername(username)
    this.setPassword(password)
    this.setLastUpdate(lastUpdate)
    this.setPicture(picture)
    resetChangedOnNotNull()
  }

  /**
   * Create a detached, initialised StaffRecord
   */
  def this(value: org.jooq.demo.skala.db.tables.pojos.Staff) = {
    this()

    if (value != null) {
      this.setStaffId(value.getStaffId)
      this.setFirstName(value.getFirstName)
      this.setLastName(value.getLastName)
      this.setAddressId(value.getAddressId)
      this.setEmail(value.getEmail)
      this.setStoreId(value.getStoreId)
      this.setActive(value.getActive)
      this.setUsername(value.getUsername)
      this.setPassword(value.getPassword)
      this.setLastUpdate(value.getLastUpdate)
      this.setPicture(value.getPicture)
      resetChangedOnNotNull()
    }
  }
}
