/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables


import java.lang.Class
import java.lang.Long
import java.lang.String
import java.time.LocalDateTime
import java.util.Arrays
import java.util.List
import java.util.function.Function

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Result
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableLike
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.demo.skala.db.Indexes
import org.jooq.demo.skala.db.Keys
import org.jooq.demo.skala.db.Public
import org.jooq.demo.skala.db.tables.records.AddressRecord
import org.jooq.demo.skala.db.tables.records.CustomerRecord
import org.jooq.demo.skala.db.tables.records.InventoryRecord
import org.jooq.demo.skala.db.tables.records.StaffRecord
import org.jooq.demo.skala.db.tables.records.StoreRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array


object Store {

  /**
   * The reference instance of <code>public.store</code>
   */
  val STORE = new Store
}

/**
 * This class is generated by jOOQ.
 */
class Store(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, StoreRecord],
  aliased: Table[StoreRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[StoreRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[StoreRecord] = classOf[StoreRecord]

  /**
   * The column <code>public.store.store_id</code>.
   */
  val STORE_ID: TableField[StoreRecord, Long] = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false).identity(true), "")

  /**
   * The column <code>public.store.manager_staff_id</code>.
   */
  val MANAGER_STAFF_ID: TableField[StoreRecord, Long] = createField(DSL.name("manager_staff_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.store.address_id</code>.
   */
  val ADDRESS_ID: TableField[StoreRecord, Long] = createField(DSL.name("address_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.store.last_update</code>.
   */
  val LAST_UPDATE: TableField[StoreRecord, LocalDateTime] = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), "")

  private def this(alias: Name, aliased: Table[StoreRecord]) = this(alias, null, null, aliased, null)

  /**
   * Create an aliased <code>public.store</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.demo.skala.db.tables.Store.STORE)

  /**
   * Create an aliased <code>public.store</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.demo.skala.db.tables.Store.STORE)

  /**
   * Create a <code>public.store</code> table reference
   */
  def this() = this(DSL.name("store"), null)

  def this(child: Table[_ <: Record], key: ForeignKey[_ <: Record, StoreRecord]) = this(Internal.createPathAlias(child, key), child, key, org.jooq.demo.skala.db.tables.Store.STORE, null)

  override def getSchema: Schema = if (aliased()) null else Public.PUBLIC

  override def getIndexes: List[Index] = Arrays.asList[ Index ](Indexes.IDX_UNQ_MANAGER_STAFF_ID)

  override def getIdentity: Identity[StoreRecord, Long] = super.getIdentity.asInstanceOf[ Identity[StoreRecord, Long] ]

  override def getPrimaryKey: UniqueKey[StoreRecord] = Keys.STORE_PKEY

  override def getReferences: List[ ForeignKey[StoreRecord, _] ] = Arrays.asList[ ForeignKey[StoreRecord, _] ](Keys.STORE__STORE_MANAGER_STAFF_ID_FKEY, Keys.STORE__STORE_ADDRESS_ID_FKEY)

  /**
   * Get the implicit join path to the <code>public.staff</code> table.
   */
  lazy val staff: Staff = { new Staff(this, Keys.STORE__STORE_MANAGER_STAFF_ID_FKEY) }

  /**
   * Get the implicit join path to the <code>public.address</code> table.
   */
  lazy val address: Address = { new Address(this, Keys.STORE__STORE_ADDRESS_ID_FKEY) }

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.customer</code> one-to-many child table.
   */
  def customerExists(): Condition = customerExists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.customer</code> one-to-many child table.
   */
  def customerExists[O <: Record](subquery: (Customer) => TableLike[O]): Condition = oneToManyExists(Keys.CUSTOMER__CUSTOMER_STORE_ID_FKEY, (t: Table[CustomerRecord]) => subquery(t.asInstanceOf[Customer]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.inventory</code> one-to-many child table.
   */
  def inventoryExists(): Condition = inventoryExists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.inventory</code> one-to-many child table.
   */
  def inventoryExists[O <: Record](subquery: (Inventory) => TableLike[O]): Condition = oneToManyExists(Keys.INVENTORY__INVENTORY_STORE_ID_FKEY, (t: Table[InventoryRecord]) => subquery(t.asInstanceOf[Inventory]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.staff</code> one-to-many child table.
   */
  def staffExists(): Condition = staffExists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.staff</code> one-to-many child table.
   */
  def staffExists[O <: Record](subquery: (Staff) => TableLike[O]): Condition = oneToManyExists(Keys.STAFF__STAFF_STORE_ID_FKEY, (t: Table[StaffRecord]) => subquery(t.asInstanceOf[Staff]))

  /**
   * A convenience constructor for correlated <code>ROW</code>s expressions to
   * the <code>public.store</code> to-one parent table.
   */
  def staffRow(): Field[StaffRecord] = staffRow(t => t)

  /**
   * A convenience constructor for correlated <code>ROW</code>s expressions to
   * the <code>public.store</code> to-one parent table.
   */
  def staffRow[O <: Record](subquery: (Staff) => TableLike[O]): Field[O] = toOneRow(Keys.STORE__STORE_MANAGER_STAFF_ID_FKEY, (t: Table[StaffRecord]) => subquery(t.asInstanceOf[Staff]))

  /**
   * A convenience constructor for correlated <code>ROW</code>s expressions to
   * the <code>public.store</code> to-one parent table.
   */
  def addressRow(): Field[AddressRecord] = addressRow(t => t)

  /**
   * A convenience constructor for correlated <code>ROW</code>s expressions to
   * the <code>public.store</code> to-one parent table.
   */
  def addressRow[O <: Record](subquery: (Address) => TableLike[O]): Field[O] = toOneRow(Keys.STORE__STORE_ADDRESS_ID_FKEY, (t: Table[AddressRecord]) => subquery(t.asInstanceOf[Address]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.customer</code> one-to-many child table.
   */
  def customerMultiset(): Field[Result[CustomerRecord]] = customerMultiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.customer</code> one-to-many child table.
   */
  def customerMultiset[O <: Record](subquery: (Customer) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.CUSTOMER__CUSTOMER_STORE_ID_FKEY, (t: Table[CustomerRecord]) => subquery(t.asInstanceOf[Customer]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.inventory</code> one-to-many child table.
   */
  def inventoryMultiset(): Field[Result[InventoryRecord]] = inventoryMultiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.inventory</code> one-to-many child table.
   */
  def inventoryMultiset[O <: Record](subquery: (Inventory) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.INVENTORY__INVENTORY_STORE_ID_FKEY, (t: Table[InventoryRecord]) => subquery(t.asInstanceOf[Inventory]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.staff</code> one-to-many child table.
   */
  def staffMultiset(): Field[Result[StaffRecord]] = staffMultiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.staff</code> one-to-many child table.
   */
  def staffMultiset[O <: Record](subquery: (Staff) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.STAFF__STAFF_STORE_ID_FKEY, (t: Table[StaffRecord]) => subquery(t.asInstanceOf[Staff]))
  override def as(alias: String): Store = new Store(DSL.name(alias), this)
  override def as(alias: Name): Store = new Store(alias, this)
  override def as(alias: Table[_]): Store = new Store(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): Store = new Store(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Store = new Store(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[_]): Store = new Store(name.getQualifiedName(), null)

  // -------------------------------------------------------------------------
  // Row4 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row4[Long, Long, Long, LocalDateTime] = super.fieldsRow.asInstanceOf[ Row4[Long, Long, Long, LocalDateTime] ]

  /**
   * Convenience mapping calling {@link #convertFrom(Function)}.
   */
  def mapping[U](from: (Long, Long, Long, LocalDateTime) => U): SelectField[U] = convertFrom(r => from.apply(r.value1(), r.value2(), r.value3(), r.value4()))

  /**
   * Convenience mapping calling {@link #convertFrom(Class, Function)}.
   */
  def mapping[U](toType: Class[U], from: (Long, Long, Long, LocalDateTime) => U): SelectField[U] = convertFrom(toType,r => from.apply(r.value1(), r.value2(), r.value3(), r.value4()))
}
