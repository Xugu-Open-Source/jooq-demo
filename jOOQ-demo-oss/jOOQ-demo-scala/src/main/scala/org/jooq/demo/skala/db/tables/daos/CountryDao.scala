/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.daos


import java.lang.Long
import java.lang.String
import java.time.LocalDateTime
import java.util.List

import org.jooq.Configuration
import org.jooq.demo.skala.db.tables.Country
import org.jooq.demo.skala.db.tables.records.CountryRecord
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
class CountryDao(configuration: Configuration) extends DAOImpl[CountryRecord, org.jooq.demo.skala.db.tables.pojos.Country, Long](Country.COUNTRY, classOf[org.jooq.demo.skala.db.tables.pojos.Country], configuration) {

  /**
   * Create a new CountryDao without any configuration
   */
  def this() = this(null)

  override def getId(o: org.jooq.demo.skala.db.tables.pojos.Country): Long = o.getCountryId

  /**
   * Fetch records that have <code>country_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfCountryId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Country] = fetchRange(Country.COUNTRY.COUNTRY_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>country_id IN (values)</code>
   */
  def fetchByCountryId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Country] = fetch(Country.COUNTRY.COUNTRY_ID, values:_*)

  /**
   * Fetch a unique record that has <code>country_id = value</code>
   */
  def fetchOneByCountryId(value: Long): org.jooq.demo.skala.db.tables.pojos.Country = fetchOne(Country.COUNTRY.COUNTRY_ID, value)

  /**
   * Fetch records that have <code>country BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfCountry(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Country] = fetchRange(Country.COUNTRY.COUNTRY_, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>country IN (values)</code>
   */
  def fetchByCountry(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Country] = fetch(Country.COUNTRY.COUNTRY_, values:_*)

  /**
   * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime, upperInclusive: LocalDateTime): List[org.jooq.demo.skala.db.tables.pojos.Country] = fetchRange(Country.COUNTRY.LAST_UPDATE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>last_update IN (values)</code>
   */
  def fetchByLastUpdate(values: LocalDateTime*): List[org.jooq.demo.skala.db.tables.pojos.Country] = fetch(Country.COUNTRY.LAST_UPDATE, values:_*)
}
