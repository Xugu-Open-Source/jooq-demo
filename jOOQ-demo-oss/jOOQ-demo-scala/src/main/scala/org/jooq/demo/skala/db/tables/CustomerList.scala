/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables


import java.lang.Class
import java.lang.Long
import java.lang.String
import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.demo.skala.db.Public
import org.jooq.demo.skala.db.tables.records.CustomerListRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array


object CustomerList {

  /**
   * The reference instance of <code>public.customer_list</code>
   */
  val CUSTOMER_LIST = new CustomerList
}

/**
 * This class is generated by jOOQ.
 */
class CustomerList(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, CustomerListRecord],
  aliased: Table[CustomerListRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[CustomerListRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.view("""
  create view "customer_list" as  SELECT cu.customer_id AS id,
   (((cu.first_name)::text || ' '::text) || (cu.last_name)::text) AS name,
   a.address,
   a.postal_code AS "zip code",
   a.phone,
   city.city,
   country.country,
       CASE
           WHEN cu.activebool THEN 'active'::text
           ELSE ''::text
       END AS notes,
   cu.store_id AS sid
  FROM (((customer cu
    JOIN address a ON ((cu.address_id = a.address_id)))
    JOIN city ON ((a.city_id = city.city_id)))
    JOIN country ON ((city.country_id = country.country_id)));
  """)
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[CustomerListRecord] = classOf[CustomerListRecord]

  /**
   * The column <code>public.customer_list.id</code>.
   */
  val ID: TableField[CustomerListRecord, Long] = createField(DSL.name("id"), SQLDataType.BIGINT, "")

  /**
   * The column <code>public.customer_list.name</code>.
   */
  val NAME: TableField[CustomerListRecord, String] = createField(DSL.name("name"), SQLDataType.CLOB, "")

  /**
   * The column <code>public.customer_list.address</code>.
   */
  val ADDRESS: TableField[CustomerListRecord, String] = createField(DSL.name("address"), SQLDataType.VARCHAR(50), "")

  /**
   * The column <code>public.customer_list.zip code</code>.
   */
  val ZIP_CODE: TableField[CustomerListRecord, String] = createField(DSL.name("zip code"), SQLDataType.VARCHAR(10), "")

  /**
   * The column <code>public.customer_list.phone</code>.
   */
  val PHONE: TableField[CustomerListRecord, String] = createField(DSL.name("phone"), SQLDataType.VARCHAR(20), "")

  /**
   * The column <code>public.customer_list.city</code>.
   */
  val CITY: TableField[CustomerListRecord, String] = createField(DSL.name("city"), SQLDataType.VARCHAR(50), "")

  /**
   * The column <code>public.customer_list.country</code>.
   */
  val COUNTRY: TableField[CustomerListRecord, String] = createField(DSL.name("country"), SQLDataType.VARCHAR(50), "")

  /**
   * The column <code>public.customer_list.notes</code>.
   */
  val NOTES: TableField[CustomerListRecord, String] = createField(DSL.name("notes"), SQLDataType.CLOB, "")

  /**
   * The column <code>public.customer_list.sid</code>.
   */
  val SID: TableField[CustomerListRecord, Long] = createField(DSL.name("sid"), SQLDataType.BIGINT, "")

  private def this(alias: Name, aliased: Table[CustomerListRecord]) = this(alias, null, null, aliased, null)

  /**
   * Create an aliased <code>public.customer_list</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.demo.skala.db.tables.CustomerList.CUSTOMER_LIST)

  /**
   * Create an aliased <code>public.customer_list</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.demo.skala.db.tables.CustomerList.CUSTOMER_LIST)

  /**
   * Create a <code>public.customer_list</code> table reference
   */
  def this() = this(DSL.name("customer_list"), null)

  def this(child: Table[_ <: Record], key: ForeignKey[_ <: Record, CustomerListRecord]) = this(Internal.createPathAlias(child, key), child, key, org.jooq.demo.skala.db.tables.CustomerList.CUSTOMER_LIST, null)

  override def getSchema: Schema = if (aliased()) null else Public.PUBLIC
  override def as(alias: String): CustomerList = new CustomerList(DSL.name(alias), this)
  override def as(alias: Name): CustomerList = new CustomerList(alias, this)
  override def as(alias: Table[_]): CustomerList = new CustomerList(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): CustomerList = new CustomerList(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): CustomerList = new CustomerList(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[_]): CustomerList = new CustomerList(name.getQualifiedName(), null)

  // -------------------------------------------------------------------------
  // Row9 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row9[Long, String, String, String, String, String, String, String, Long] = super.fieldsRow.asInstanceOf[ Row9[Long, String, String, String, String, String, String, String, Long] ]

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
   */
  def mapping[U](from: (Long, String, String, String, String, String, String, String, Long) => U): SelectField[U] = convertFrom(r => from.apply(r.value1(), r.value2(), r.value3(), r.value4(), r.value5(), r.value6(), r.value7(), r.value8(), r.value9()))

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Class,
   * Function)}.
   */
  def mapping[U](toType: Class[U], from: (Long, String, String, String, String, String, String, String, Long) => U): SelectField[U] = convertFrom(toType,r => from.apply(r.value1(), r.value2(), r.value3(), r.value4(), r.value5(), r.value6(), r.value7(), r.value8(), r.value9()))
}
