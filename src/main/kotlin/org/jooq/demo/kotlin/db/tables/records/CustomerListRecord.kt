/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables.records


import org.jooq.Field
import org.jooq.Record9
import org.jooq.Row9
import org.jooq.demo.kotlin.db.tables.CustomerList
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CustomerListRecord() : TableRecordImpl<CustomerListRecord>(CustomerList.CUSTOMER_LIST), Record9<Long?, String?, String?, String?, String?, String?, String?, String?, Long?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var address: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var zipCode: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var phone: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var city: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var country: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var notes: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var sid: Long?
        set(value): Unit = set(8, value)
        get(): Long? = get(8) as Long?

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row9<Long?, String?, String?, String?, String?, String?, String?, String?, Long?> = super.fieldsRow() as Row9<Long?, String?, String?, String?, String?, String?, String?, String?, Long?>
    override fun valuesRow(): Row9<Long?, String?, String?, String?, String?, String?, String?, String?, Long?> = super.valuesRow() as Row9<Long?, String?, String?, String?, String?, String?, String?, String?, Long?>
    override fun field1(): Field<Long?> = CustomerList.CUSTOMER_LIST.ID
    override fun field2(): Field<String?> = CustomerList.CUSTOMER_LIST.NAME
    override fun field3(): Field<String?> = CustomerList.CUSTOMER_LIST.ADDRESS
    override fun field4(): Field<String?> = org.jooq.demo.kotlin.db.tables.CustomerList.CUSTOMER_LIST.`ZIP CODE`
    override fun field5(): Field<String?> = CustomerList.CUSTOMER_LIST.PHONE
    override fun field6(): Field<String?> = CustomerList.CUSTOMER_LIST.CITY
    override fun field7(): Field<String?> = CustomerList.CUSTOMER_LIST.COUNTRY
    override fun field8(): Field<String?> = CustomerList.CUSTOMER_LIST.NOTES
    override fun field9(): Field<Long?> = CustomerList.CUSTOMER_LIST.SID
    override fun component1(): Long? = id
    override fun component2(): String? = name
    override fun component3(): String? = address
    override fun component4(): String? = zipCode
    override fun component5(): String? = phone
    override fun component6(): String? = city
    override fun component7(): String? = country
    override fun component8(): String? = notes
    override fun component9(): Long? = sid
    override fun value1(): Long? = id
    override fun value2(): String? = name
    override fun value3(): String? = address
    override fun value4(): String? = zipCode
    override fun value5(): String? = phone
    override fun value6(): String? = city
    override fun value7(): String? = country
    override fun value8(): String? = notes
    override fun value9(): Long? = sid

    override fun value1(value: Long?): CustomerListRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): CustomerListRecord {
        this.name = value
        return this
    }

    override fun value3(value: String?): CustomerListRecord {
        this.address = value
        return this
    }

    override fun value4(value: String?): CustomerListRecord {
        this.zipCode = value
        return this
    }

    override fun value5(value: String?): CustomerListRecord {
        this.phone = value
        return this
    }

    override fun value6(value: String?): CustomerListRecord {
        this.city = value
        return this
    }

    override fun value7(value: String?): CustomerListRecord {
        this.country = value
        return this
    }

    override fun value8(value: String?): CustomerListRecord {
        this.notes = value
        return this
    }

    override fun value9(value: Long?): CustomerListRecord {
        this.sid = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: String?, value5: String?, value6: String?, value7: String?, value8: String?, value9: Long?): CustomerListRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        return this
    }

    /**
     * Create a detached, initialised CustomerListRecord
     */
    constructor(id: Long? = null, name: String? = null, address: String? = null, zipCode: String? = null, phone: String? = null, city: String? = null, country: String? = null, notes: String? = null, sid: Long? = null): this() {
        this.id = id
        this.name = name
        this.address = address
        this.zipCode = zipCode
        this.phone = phone
        this.city = city
        this.country = country
        this.notes = notes
        this.sid = sid
    }

    /**
     * Create a detached, initialised CustomerListRecord
     */
    constructor(value: org.jooq.demo.kotlin.db.tables.pojos.CustomerList?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.address = value.address
            this.zipCode = value.zipCode
            this.phone = value.phone
            this.city = value.city
            this.country = value.country
            this.notes = value.notes
            this.sid = value.sid
        }
    }
}
