/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.keys


import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.demo.kotlin.db.tables.Actor
import org.jooq.demo.kotlin.db.tables.Address
import org.jooq.demo.kotlin.db.tables.Category
import org.jooq.demo.kotlin.db.tables.City
import org.jooq.demo.kotlin.db.tables.Country
import org.jooq.demo.kotlin.db.tables.Customer
import org.jooq.demo.kotlin.db.tables.Film
import org.jooq.demo.kotlin.db.tables.FilmActor
import org.jooq.demo.kotlin.db.tables.FilmCategory
import org.jooq.demo.kotlin.db.tables.Inventory
import org.jooq.demo.kotlin.db.tables.Language
import org.jooq.demo.kotlin.db.tables.Payment
import org.jooq.demo.kotlin.db.tables.Rental
import org.jooq.demo.kotlin.db.tables.Staff
import org.jooq.demo.kotlin.db.tables.Store
import org.jooq.demo.kotlin.db.tables.records.ActorRecord
import org.jooq.demo.kotlin.db.tables.records.AddressRecord
import org.jooq.demo.kotlin.db.tables.records.CategoryRecord
import org.jooq.demo.kotlin.db.tables.records.CityRecord
import org.jooq.demo.kotlin.db.tables.records.CountryRecord
import org.jooq.demo.kotlin.db.tables.records.CustomerRecord
import org.jooq.demo.kotlin.db.tables.records.FilmActorRecord
import org.jooq.demo.kotlin.db.tables.records.FilmCategoryRecord
import org.jooq.demo.kotlin.db.tables.records.FilmRecord
import org.jooq.demo.kotlin.db.tables.records.InventoryRecord
import org.jooq.demo.kotlin.db.tables.records.LanguageRecord
import org.jooq.demo.kotlin.db.tables.records.PaymentRecord
import org.jooq.demo.kotlin.db.tables.records.RentalRecord
import org.jooq.demo.kotlin.db.tables.records.StaffRecord
import org.jooq.demo.kotlin.db.tables.records.StoreRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val ACTOR__ACTOR_PKEY: UniqueKey<ActorRecord> = Internal.createUniqueKey(Actor.ACTOR, DSL.name("actor_pkey"), arrayOf(Actor.ACTOR.ACTOR_ID), true)
val ADDRESS__ADDRESS_PKEY: UniqueKey<AddressRecord> = Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_pkey"), arrayOf(Address.ADDRESS.ADDRESS_ID), true)
val CATEGORY__CATEGORY_PKEY: UniqueKey<CategoryRecord> = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), arrayOf(Category.CATEGORY.CATEGORY_ID), true)
val CITY__CITY_PKEY: UniqueKey<CityRecord> = Internal.createUniqueKey(City.CITY, DSL.name("city_pkey"), arrayOf(City.CITY.CITY_ID), true)
val COUNTRY__COUNTRY_PKEY: UniqueKey<CountryRecord> = Internal.createUniqueKey(Country.COUNTRY, DSL.name("country_pkey"), arrayOf(Country.COUNTRY.COUNTRY_ID), true)
val CUSTOMER__CUSTOMER_PKEY: UniqueKey<CustomerRecord> = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_pkey"), arrayOf(Customer.CUSTOMER.CUSTOMER_ID), true)
val FILM__FILM_PKEY: UniqueKey<FilmRecord> = Internal.createUniqueKey(Film.FILM, DSL.name("film_pkey"), arrayOf(Film.FILM.FILM_ID), true)
val FILM_ACTOR__FILM_ACTOR_PKEY: UniqueKey<FilmActorRecord> = Internal.createUniqueKey(FilmActor.FILM_ACTOR, DSL.name("film_actor_pkey"), arrayOf(FilmActor.FILM_ACTOR.ACTOR_ID, FilmActor.FILM_ACTOR.FILM_ID), true)
val FILM_CATEGORY__FILM_CATEGORY_PKEY: UniqueKey<FilmCategoryRecord> = Internal.createUniqueKey(FilmCategory.FILM_CATEGORY, DSL.name("film_category_pkey"), arrayOf(FilmCategory.FILM_CATEGORY.FILM_ID, FilmCategory.FILM_CATEGORY.CATEGORY_ID), true)
val INVENTORY__INVENTORY_PKEY: UniqueKey<InventoryRecord> = Internal.createUniqueKey(Inventory.INVENTORY, DSL.name("inventory_pkey"), arrayOf(Inventory.INVENTORY.INVENTORY_ID), true)
val LANGUAGE__LANGUAGE_PKEY: UniqueKey<LanguageRecord> = Internal.createUniqueKey(Language.LANGUAGE, DSL.name("language_pkey"), arrayOf(Language.LANGUAGE.LANGUAGE_ID), true)
val PAYMENT__PAYMENT_PKEY: UniqueKey<PaymentRecord> = Internal.createUniqueKey(Payment.PAYMENT, DSL.name("payment_pkey"), arrayOf(Payment.PAYMENT.PAYMENT_ID), true)
val RENTAL__IDX_UNQ_RENTAL_RENTAL_DATE_INVENTORY_ID_CUSTOMER_ID: UniqueKey<RentalRecord> = Internal.createUniqueKey(Rental.RENTAL, DSL.name("idx_unq_rental_rental_date_inventory_id_customer_id"), arrayOf(Rental.RENTAL.RENTAL_DATE, Rental.RENTAL.INVENTORY_ID, Rental.RENTAL.CUSTOMER_ID), true)
val RENTAL__RENTAL_PKEY: UniqueKey<RentalRecord> = Internal.createUniqueKey(Rental.RENTAL, DSL.name("rental_pkey"), arrayOf(Rental.RENTAL.RENTAL_ID), true)
val STAFF__STAFF_PKEY: UniqueKey<StaffRecord> = Internal.createUniqueKey(Staff.STAFF, DSL.name("staff_pkey"), arrayOf(Staff.STAFF.STAFF_ID), true)
val STORE__IDX_UNQ_MANAGER_STAFF_ID: UniqueKey<StoreRecord> = Internal.createUniqueKey(Store.STORE, DSL.name("idx_unq_manager_staff_id"), arrayOf(Store.STORE.MANAGER_STAFF_ID), true)
val STORE__STORE_PKEY: UniqueKey<StoreRecord> = Internal.createUniqueKey(Store.STORE, DSL.name("store_pkey"), arrayOf(Store.STORE.STORE_ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val ADDRESS__ADDRESS_CITY_ID_FKEY: ForeignKey<AddressRecord, CityRecord> = Internal.createForeignKey(Address.ADDRESS, DSL.name("address_city_id_fkey"), arrayOf(Address.ADDRESS.CITY_ID), org.jooq.demo.kotlin.db.keys.CITY__CITY_PKEY, arrayOf(City.CITY.CITY_ID), true)
val CITY__CITY_COUNTRY_ID_FKEY: ForeignKey<CityRecord, CountryRecord> = Internal.createForeignKey(City.CITY, DSL.name("city_country_id_fkey"), arrayOf(City.CITY.COUNTRY_ID), org.jooq.demo.kotlin.db.keys.COUNTRY__COUNTRY_PKEY, arrayOf(Country.COUNTRY.COUNTRY_ID), true)
val CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY: ForeignKey<CustomerRecord, AddressRecord> = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("customer_address_id_fkey"), arrayOf(Customer.CUSTOMER.ADDRESS_ID), org.jooq.demo.kotlin.db.keys.ADDRESS__ADDRESS_PKEY, arrayOf(Address.ADDRESS.ADDRESS_ID), true)
val CUSTOMER__CUSTOMER_STORE_ID_FKEY: ForeignKey<CustomerRecord, StoreRecord> = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("customer_store_id_fkey"), arrayOf(Customer.CUSTOMER.STORE_ID), org.jooq.demo.kotlin.db.keys.STORE__STORE_PKEY, arrayOf(Store.STORE.STORE_ID), true)
val FILM__FILM_LANGUAGE_ID_FKEY: ForeignKey<FilmRecord, LanguageRecord> = Internal.createForeignKey(Film.FILM, DSL.name("film_language_id_fkey"), arrayOf(Film.FILM.LANGUAGE_ID), org.jooq.demo.kotlin.db.keys.LANGUAGE__LANGUAGE_PKEY, arrayOf(Language.LANGUAGE.LANGUAGE_ID), true)
val FILM__FILM_ORIGINAL_LANGUAGE_ID_FKEY: ForeignKey<FilmRecord, LanguageRecord> = Internal.createForeignKey(Film.FILM, DSL.name("film_original_language_id_fkey"), arrayOf(Film.FILM.ORIGINAL_LANGUAGE_ID), org.jooq.demo.kotlin.db.keys.LANGUAGE__LANGUAGE_PKEY, arrayOf(Language.LANGUAGE.LANGUAGE_ID), true)
val FILM_ACTOR__FILM_ACTOR_ACTOR_ID_FKEY: ForeignKey<FilmActorRecord, ActorRecord> = Internal.createForeignKey(FilmActor.FILM_ACTOR, DSL.name("film_actor_actor_id_fkey"), arrayOf(FilmActor.FILM_ACTOR.ACTOR_ID), org.jooq.demo.kotlin.db.keys.ACTOR__ACTOR_PKEY, arrayOf(Actor.ACTOR.ACTOR_ID), true)
val FILM_ACTOR__FILM_ACTOR_FILM_ID_FKEY: ForeignKey<FilmActorRecord, FilmRecord> = Internal.createForeignKey(FilmActor.FILM_ACTOR, DSL.name("film_actor_film_id_fkey"), arrayOf(FilmActor.FILM_ACTOR.FILM_ID), org.jooq.demo.kotlin.db.keys.FILM__FILM_PKEY, arrayOf(Film.FILM.FILM_ID), true)
val FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY: ForeignKey<FilmCategoryRecord, CategoryRecord> = Internal.createForeignKey(FilmCategory.FILM_CATEGORY, DSL.name("film_category_category_id_fkey"), arrayOf(FilmCategory.FILM_CATEGORY.CATEGORY_ID), org.jooq.demo.kotlin.db.keys.CATEGORY__CATEGORY_PKEY, arrayOf(Category.CATEGORY.CATEGORY_ID), true)
val FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY: ForeignKey<FilmCategoryRecord, FilmRecord> = Internal.createForeignKey(FilmCategory.FILM_CATEGORY, DSL.name("film_category_film_id_fkey"), arrayOf(FilmCategory.FILM_CATEGORY.FILM_ID), org.jooq.demo.kotlin.db.keys.FILM__FILM_PKEY, arrayOf(Film.FILM.FILM_ID), true)
val INVENTORY__INVENTORY_FILM_ID_FKEY: ForeignKey<InventoryRecord, FilmRecord> = Internal.createForeignKey(Inventory.INVENTORY, DSL.name("inventory_film_id_fkey"), arrayOf(Inventory.INVENTORY.FILM_ID), org.jooq.demo.kotlin.db.keys.FILM__FILM_PKEY, arrayOf(Film.FILM.FILM_ID), true)
val INVENTORY__INVENTORY_STORE_ID_FKEY: ForeignKey<InventoryRecord, StoreRecord> = Internal.createForeignKey(Inventory.INVENTORY, DSL.name("inventory_store_id_fkey"), arrayOf(Inventory.INVENTORY.STORE_ID), org.jooq.demo.kotlin.db.keys.STORE__STORE_PKEY, arrayOf(Store.STORE.STORE_ID), true)
val PAYMENT__PAYMENT_CUSTOMER_ID_FKEY: ForeignKey<PaymentRecord, CustomerRecord> = Internal.createForeignKey(Payment.PAYMENT, DSL.name("payment_customer_id_fkey"), arrayOf(Payment.PAYMENT.CUSTOMER_ID), org.jooq.demo.kotlin.db.keys.CUSTOMER__CUSTOMER_PKEY, arrayOf(Customer.CUSTOMER.CUSTOMER_ID), true)
val PAYMENT__PAYMENT_RENTAL_ID_FKEY: ForeignKey<PaymentRecord, RentalRecord> = Internal.createForeignKey(Payment.PAYMENT, DSL.name("payment_rental_id_fkey"), arrayOf(Payment.PAYMENT.RENTAL_ID), org.jooq.demo.kotlin.db.keys.RENTAL__RENTAL_PKEY, arrayOf(Rental.RENTAL.RENTAL_ID), true)
val PAYMENT__PAYMENT_STAFF_ID_FKEY: ForeignKey<PaymentRecord, StaffRecord> = Internal.createForeignKey(Payment.PAYMENT, DSL.name("payment_staff_id_fkey"), arrayOf(Payment.PAYMENT.STAFF_ID), org.jooq.demo.kotlin.db.keys.STAFF__STAFF_PKEY, arrayOf(Staff.STAFF.STAFF_ID), true)
val RENTAL__RENTAL_CUSTOMER_ID_FKEY: ForeignKey<RentalRecord, CustomerRecord> = Internal.createForeignKey(Rental.RENTAL, DSL.name("rental_customer_id_fkey"), arrayOf(Rental.RENTAL.CUSTOMER_ID), org.jooq.demo.kotlin.db.keys.CUSTOMER__CUSTOMER_PKEY, arrayOf(Customer.CUSTOMER.CUSTOMER_ID), true)
val RENTAL__RENTAL_INVENTORY_ID_FKEY: ForeignKey<RentalRecord, InventoryRecord> = Internal.createForeignKey(Rental.RENTAL, DSL.name("rental_inventory_id_fkey"), arrayOf(Rental.RENTAL.INVENTORY_ID), org.jooq.demo.kotlin.db.keys.INVENTORY__INVENTORY_PKEY, arrayOf(Inventory.INVENTORY.INVENTORY_ID), true)
val RENTAL__RENTAL_STAFF_ID_FKEY: ForeignKey<RentalRecord, StaffRecord> = Internal.createForeignKey(Rental.RENTAL, DSL.name("rental_staff_id_fkey"), arrayOf(Rental.RENTAL.STAFF_ID), org.jooq.demo.kotlin.db.keys.STAFF__STAFF_PKEY, arrayOf(Staff.STAFF.STAFF_ID), true)
val STAFF__STAFF_ADDRESS_ID_FKEY: ForeignKey<StaffRecord, AddressRecord> = Internal.createForeignKey(Staff.STAFF, DSL.name("staff_address_id_fkey"), arrayOf(Staff.STAFF.ADDRESS_ID), org.jooq.demo.kotlin.db.keys.ADDRESS__ADDRESS_PKEY, arrayOf(Address.ADDRESS.ADDRESS_ID), true)
val STAFF__STAFF_STORE_ID_FKEY: ForeignKey<StaffRecord, StoreRecord> = Internal.createForeignKey(Staff.STAFF, DSL.name("staff_store_id_fkey"), arrayOf(Staff.STAFF.STORE_ID), org.jooq.demo.kotlin.db.keys.STORE__STORE_PKEY, arrayOf(Store.STORE.STORE_ID), true)
val STORE__STORE_ADDRESS_ID_FKEY: ForeignKey<StoreRecord, AddressRecord> = Internal.createForeignKey(Store.STORE, DSL.name("store_address_id_fkey"), arrayOf(Store.STORE.ADDRESS_ID), org.jooq.demo.kotlin.db.keys.ADDRESS__ADDRESS_PKEY, arrayOf(Address.ADDRESS.ADDRESS_ID), true)
val STORE__STORE_MANAGER_STAFF_ID_FKEY: ForeignKey<StoreRecord, StaffRecord> = Internal.createForeignKey(Store.STORE, DSL.name("store_manager_staff_id_fkey"), arrayOf(Store.STORE.MANAGER_STAFF_ID), org.jooq.demo.kotlin.db.keys.STAFF__STAFF_PKEY, arrayOf(Staff.STAFF.STAFF_ID), true)
