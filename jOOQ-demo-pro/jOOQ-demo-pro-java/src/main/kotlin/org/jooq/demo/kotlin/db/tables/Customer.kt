/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables


import java.time.LocalDate
import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Result
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableLike
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.demo.kotlin.db.Public
import org.jooq.demo.kotlin.db.indexes.IDX_FK_ADDRESS_ID
import org.jooq.demo.kotlin.db.indexes.IDX_FK_STORE_ID
import org.jooq.demo.kotlin.db.indexes.IDX_LAST_NAME
import org.jooq.demo.kotlin.db.keys.CUSTOMER_PKEY
import org.jooq.demo.kotlin.db.keys.CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY
import org.jooq.demo.kotlin.db.keys.CUSTOMER__CUSTOMER_STORE_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT_P2007_01__PAYMENT_P2007_01_CUSTOMER_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT_P2007_02__PAYMENT_P2007_02_CUSTOMER_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT_P2007_03__PAYMENT_P2007_03_CUSTOMER_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT_P2007_04__PAYMENT_P2007_04_CUSTOMER_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT_P2007_05__PAYMENT_P2007_05_CUSTOMER_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT_P2007_06__PAYMENT_P2007_06_CUSTOMER_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT__PAYMENT_CUSTOMER_ID_FKEY
import org.jooq.demo.kotlin.db.keys.RENTAL__RENTAL_CUSTOMER_ID_FKEY
import org.jooq.demo.kotlin.db.tables.records.AddressRecord
import org.jooq.demo.kotlin.db.tables.records.CustomerRecord
import org.jooq.demo.kotlin.db.tables.records.PaymentP2007_01Record
import org.jooq.demo.kotlin.db.tables.records.PaymentP2007_02Record
import org.jooq.demo.kotlin.db.tables.records.PaymentP2007_03Record
import org.jooq.demo.kotlin.db.tables.records.PaymentP2007_04Record
import org.jooq.demo.kotlin.db.tables.records.PaymentP2007_05Record
import org.jooq.demo.kotlin.db.tables.records.PaymentP2007_06Record
import org.jooq.demo.kotlin.db.tables.records.PaymentRecord
import org.jooq.demo.kotlin.db.tables.records.RentalRecord
import org.jooq.demo.kotlin.db.tables.records.StoreRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Customer(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CustomerRecord>?,
    aliased: Table<CustomerRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CustomerRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.customer</code>
         */
        val CUSTOMER: Customer = Customer()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CustomerRecord> = CustomerRecord::class.java

    /**
     * The column <code>public.customer.customer_id</code>.
     */
    val CUSTOMER_ID: TableField<CustomerRecord, Long?> = createField(DSL.name("customer_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.customer.store_id</code>.
     */
    val STORE_ID: TableField<CustomerRecord, Long?> = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.customer.first_name</code>.
     */
    val FIRST_NAME: TableField<CustomerRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45).nullable(false), this, "")

    /**
     * The column <code>public.customer.last_name</code>.
     */
    val LAST_NAME: TableField<CustomerRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45).nullable(false), this, "")

    /**
     * The column <code>public.customer.email</code>.
     */
    val EMAIL: TableField<CustomerRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.customer.address_id</code>.
     */
    val ADDRESS_ID: TableField<CustomerRecord, Long?> = createField(DSL.name("address_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.customer.activebool</code>.
     */
    val ACTIVEBOOL: TableField<CustomerRecord, Boolean?> = createField(DSL.name("activebool"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.customer.create_date</code>.
     */
    val CREATE_DATE: TableField<CustomerRecord, LocalDate?> = createField(DSL.name("create_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field("('now'::text)::date", SQLDataType.LOCALDATE)), this, "")

    /**
     * The column <code>public.customer.last_update</code>.
     */
    val LAST_UPDATE: TableField<CustomerRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>public.customer.active</code>.
     */
    val ACTIVE: TableField<CustomerRecord, Int?> = createField(DSL.name("active"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<CustomerRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CustomerRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.customer</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.customer</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.customer</code> table reference
     */
    constructor(): this(DSL.name("customer"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CustomerRecord>): this(Internal.createPathAlias(child, key), child, key, CUSTOMER, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_FK_ADDRESS_ID, IDX_FK_STORE_ID, IDX_LAST_NAME)
    override fun getIdentity(): Identity<CustomerRecord, Long?> = super.getIdentity() as Identity<CustomerRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<CustomerRecord> = CUSTOMER_PKEY
    override fun getReferences(): List<ForeignKey<CustomerRecord, *>> = listOf(CUSTOMER__CUSTOMER_STORE_ID_FKEY, CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY)

    private lateinit var _store: Store
    private lateinit var _address: Address

    /**
     * Get the implicit join path to the <code>public.store</code> table.
     */
    fun store(): Store {
        if (!this::_store.isInitialized)
            _store = Store(this, CUSTOMER__CUSTOMER_STORE_ID_FKEY)

        return _store;
    }

    val store: Store
        get(): Store = store()

    /**
     * Get the implicit join path to the <code>public.address</code> table.
     */
    fun address(): Address {
        if (!this::_address.isInitialized)
            _address = Address(this, CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY)

        return _address;
    }

    val address: Address
        get(): Address = address()

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment</code> one-to-many child table.
     */
    fun paymentExists(): Condition = paymentExists { it }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment</code> one-to-many child table.
     */
    fun <O: Record>paymentExists(subquery: (Payment) -> TableLike<O>): Condition = oneToManyExists(PAYMENT__PAYMENT_CUSTOMER_ID_FKEY, { subquery(it as Payment) })

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_01</code> one-to-many child table.
     */
    fun paymentP2007_01Exists(): Condition = paymentP2007_01Exists { it }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_01</code> one-to-many child table.
     */
    fun <O: Record>paymentP2007_01Exists(subquery: (PaymentP2007_01) -> TableLike<O>): Condition = oneToManyExists(PAYMENT_P2007_01__PAYMENT_P2007_01_CUSTOMER_ID_FKEY, { subquery(it as PaymentP2007_01) })

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_02</code> one-to-many child table.
     */
    fun paymentP2007_02Exists(): Condition = paymentP2007_02Exists { it }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_02</code> one-to-many child table.
     */
    fun <O: Record>paymentP2007_02Exists(subquery: (PaymentP2007_02) -> TableLike<O>): Condition = oneToManyExists(PAYMENT_P2007_02__PAYMENT_P2007_02_CUSTOMER_ID_FKEY, { subquery(it as PaymentP2007_02) })

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_03</code> one-to-many child table.
     */
    fun paymentP2007_03Exists(): Condition = paymentP2007_03Exists { it }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_03</code> one-to-many child table.
     */
    fun <O: Record>paymentP2007_03Exists(subquery: (PaymentP2007_03) -> TableLike<O>): Condition = oneToManyExists(PAYMENT_P2007_03__PAYMENT_P2007_03_CUSTOMER_ID_FKEY, { subquery(it as PaymentP2007_03) })

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_04</code> one-to-many child table.
     */
    fun paymentP2007_04Exists(): Condition = paymentP2007_04Exists { it }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_04</code> one-to-many child table.
     */
    fun <O: Record>paymentP2007_04Exists(subquery: (PaymentP2007_04) -> TableLike<O>): Condition = oneToManyExists(PAYMENT_P2007_04__PAYMENT_P2007_04_CUSTOMER_ID_FKEY, { subquery(it as PaymentP2007_04) })

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_05</code> one-to-many child table.
     */
    fun paymentP2007_05Exists(): Condition = paymentP2007_05Exists { it }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_05</code> one-to-many child table.
     */
    fun <O: Record>paymentP2007_05Exists(subquery: (PaymentP2007_05) -> TableLike<O>): Condition = oneToManyExists(PAYMENT_P2007_05__PAYMENT_P2007_05_CUSTOMER_ID_FKEY, { subquery(it as PaymentP2007_05) })

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_06</code> one-to-many child table.
     */
    fun paymentP2007_06Exists(): Condition = paymentP2007_06Exists { it }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_06</code> one-to-many child table.
     */
    fun <O: Record>paymentP2007_06Exists(subquery: (PaymentP2007_06) -> TableLike<O>): Condition = oneToManyExists(PAYMENT_P2007_06__PAYMENT_P2007_06_CUSTOMER_ID_FKEY, { subquery(it as PaymentP2007_06) })

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.rental</code> one-to-many child table.
     */
    fun rentalExists(): Condition = rentalExists { it }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.rental</code> one-to-many child table.
     */
    fun <O: Record>rentalExists(subquery: (Rental) -> TableLike<O>): Condition = oneToManyExists(RENTAL__RENTAL_CUSTOMER_ID_FKEY, { subquery(it as Rental) })

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.customer</code> to-one parent table.
     */
    fun storeRow(): Field<StoreRecord> = storeRow { it }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.customer</code> to-one parent table.
     */
    fun <O : Record> storeRow(subquery: (Store) -> TableLike<O>): Field<O> = toOneRow(CUSTOMER__CUSTOMER_STORE_ID_FKEY, { subquery(it as Store) })

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.customer</code> to-one parent table.
     */
    fun addressRow(): Field<AddressRecord> = addressRow { it }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.customer</code> to-one parent table.
     */
    fun <O : Record> addressRow(subquery: (Address) -> TableLike<O>): Field<O> = toOneRow(CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY, { subquery(it as Address) })

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment</code> one-to-many child table.
     */
    fun paymentMultiset(): Field<Result<PaymentRecord>> = paymentMultiset { it }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment</code> one-to-many child table.
     */
    fun <O: Record>paymentMultiset(subquery: (Payment) -> TableLike<O>): Field<Result<O>> = oneToManyMultiset(PAYMENT__PAYMENT_CUSTOMER_ID_FKEY, { subquery(it as Payment) })

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_01</code> one-to-many child
     * table.
     */
    fun paymentP2007_01Multiset(): Field<Result<PaymentP2007_01Record>> = paymentP2007_01Multiset { it }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_01</code> one-to-many child
     * table.
     */
    fun <O: Record>paymentP2007_01Multiset(subquery: (PaymentP2007_01) -> TableLike<O>): Field<Result<O>> = oneToManyMultiset(PAYMENT_P2007_01__PAYMENT_P2007_01_CUSTOMER_ID_FKEY, { subquery(it as PaymentP2007_01) })

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_02</code> one-to-many child
     * table.
     */
    fun paymentP2007_02Multiset(): Field<Result<PaymentP2007_02Record>> = paymentP2007_02Multiset { it }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_02</code> one-to-many child
     * table.
     */
    fun <O: Record>paymentP2007_02Multiset(subquery: (PaymentP2007_02) -> TableLike<O>): Field<Result<O>> = oneToManyMultiset(PAYMENT_P2007_02__PAYMENT_P2007_02_CUSTOMER_ID_FKEY, { subquery(it as PaymentP2007_02) })

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_03</code> one-to-many child
     * table.
     */
    fun paymentP2007_03Multiset(): Field<Result<PaymentP2007_03Record>> = paymentP2007_03Multiset { it }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_03</code> one-to-many child
     * table.
     */
    fun <O: Record>paymentP2007_03Multiset(subquery: (PaymentP2007_03) -> TableLike<O>): Field<Result<O>> = oneToManyMultiset(PAYMENT_P2007_03__PAYMENT_P2007_03_CUSTOMER_ID_FKEY, { subquery(it as PaymentP2007_03) })

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_04</code> one-to-many child
     * table.
     */
    fun paymentP2007_04Multiset(): Field<Result<PaymentP2007_04Record>> = paymentP2007_04Multiset { it }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_04</code> one-to-many child
     * table.
     */
    fun <O: Record>paymentP2007_04Multiset(subquery: (PaymentP2007_04) -> TableLike<O>): Field<Result<O>> = oneToManyMultiset(PAYMENT_P2007_04__PAYMENT_P2007_04_CUSTOMER_ID_FKEY, { subquery(it as PaymentP2007_04) })

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_05</code> one-to-many child
     * table.
     */
    fun paymentP2007_05Multiset(): Field<Result<PaymentP2007_05Record>> = paymentP2007_05Multiset { it }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_05</code> one-to-many child
     * table.
     */
    fun <O: Record>paymentP2007_05Multiset(subquery: (PaymentP2007_05) -> TableLike<O>): Field<Result<O>> = oneToManyMultiset(PAYMENT_P2007_05__PAYMENT_P2007_05_CUSTOMER_ID_FKEY, { subquery(it as PaymentP2007_05) })

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_06</code> one-to-many child
     * table.
     */
    fun paymentP2007_06Multiset(): Field<Result<PaymentP2007_06Record>> = paymentP2007_06Multiset { it }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_06</code> one-to-many child
     * table.
     */
    fun <O: Record>paymentP2007_06Multiset(subquery: (PaymentP2007_06) -> TableLike<O>): Field<Result<O>> = oneToManyMultiset(PAYMENT_P2007_06__PAYMENT_P2007_06_CUSTOMER_ID_FKEY, { subquery(it as PaymentP2007_06) })

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.rental</code> one-to-many child table.
     */
    fun rentalMultiset(): Field<Result<RentalRecord>> = rentalMultiset { it }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.rental</code> one-to-many child table.
     */
    fun <O: Record>rentalMultiset(subquery: (Rental) -> TableLike<O>): Field<Result<O>> = oneToManyMultiset(RENTAL__RENTAL_CUSTOMER_ID_FKEY, { subquery(it as Rental) })
    override fun `as`(alias: String): Customer = Customer(DSL.name(alias), this)
    override fun `as`(alias: Name): Customer = Customer(alias, this)
    override fun `as`(alias: Table<*>): Customer = Customer(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Customer = Customer(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Customer = Customer(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Customer = Customer(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row10<Long?, Long?, String?, String?, String?, Long?, Boolean?, LocalDate?, LocalDateTime?, Int?> = super.fieldsRow() as Row10<Long?, Long?, String?, String?, String?, Long?, Boolean?, LocalDate?, LocalDateTime?, Int?>

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, String?, String?, String?, Long?, Boolean?, LocalDate?, LocalDateTime?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, String?, String?, String?, Long?, Boolean?, LocalDate?, LocalDateTime?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
