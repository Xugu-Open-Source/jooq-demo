/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db


import java.lang.Boolean
import java.lang.Integer
import java.lang.Long
import java.lang.String
import java.math.BigDecimal
import java.time.LocalDate
import java.time.LocalDateTime

import org.jooq.AggregateFunction
import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Result
import org.jooq.demo.skala.db.routines.GetCustomerBalance
import org.jooq.demo.skala.db.routines.GroupConcat
import org.jooq.demo.skala.db.routines.InventoryHeldByCustomer
import org.jooq.demo.skala.db.routines.InventoryInStock
import org.jooq.demo.skala.db.routines.LastDay
import org.jooq.demo.skala.db.routines._GroupConcat
import org.jooq.demo.skala.db.tables.FilmInStock
import org.jooq.demo.skala.db.tables.FilmNotInStock
import org.jooq.demo.skala.db.tables.RewardsReport
import org.jooq.demo.skala.db.tables.records.FilmInStockRecord
import org.jooq.demo.skala.db.tables.records.FilmNotInStockRecord
import org.jooq.demo.skala.db.tables.records.RewardsReportRecord


/**
 * Convenience access to all stored procedures and functions in public.
 */
object Routines {

  /**
   * Call <code>public._group_concat</code>
   */
  def _GroupConcat(
      configuration: Configuration
    , __1: String
    , __2: String
  ): String = {
    val f = new _GroupConcat()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    f.getReturnValue
  }

  /**
   * Get <code>public._group_concat</code> as a field.
   */
  def _GroupConcat(
      __1: String
    , __2: String
  ): Field[String] = {
    val f = new _GroupConcat
    f.set__1(__1)
    f.set__2(__2)

    return f.asField
  }

  /**
   * Get <code>public._group_concat</code> as a field.
   */
  def _GroupConcat(
      __1: Field[String]
    , __2: Field[String]
  ): Field[String] = {
    val f = new _GroupConcat
    f.set__1(__1)
    f.set__2(__2)

    return f.asField
  }

  /**
   * Call <code>public.get_customer_balance</code>
   */
  def getCustomerBalance(
      configuration: Configuration
    , pCustomerId: Long
    , pEffectiveDate: LocalDateTime
  ): BigDecimal = {
    val f = new GetCustomerBalance()
    f.setPCustomerId(pCustomerId)
    f.setPEffectiveDate(pEffectiveDate)

    f.execute(configuration)
    f.getReturnValue
  }

  /**
   * Get <code>public.get_customer_balance</code> as a field.
   */
  def getCustomerBalance(
      pCustomerId: Long
    , pEffectiveDate: LocalDateTime
  ): Field[BigDecimal] = {
    val f = new GetCustomerBalance
    f.setPCustomerId(pCustomerId)
    f.setPEffectiveDate(pEffectiveDate)

    return f.asField
  }

  /**
   * Get <code>public.get_customer_balance</code> as a field.
   */
  def getCustomerBalance(
      pCustomerId: Field[Long]
    , pEffectiveDate: Field[LocalDateTime]
  ): Field[BigDecimal] = {
    val f = new GetCustomerBalance
    f.setPCustomerId(pCustomerId)
    f.setPEffectiveDate(pEffectiveDate)

    return f.asField
  }

  /**
   * Get <code>public.group_concat</code> as a field.
   */
  def groupConcat(
      __1: String
  ): AggregateFunction[String] = {
    val f = new GroupConcat
    f.set__1(__1)

    return f.asAggregateFunction
  }

  /**
   * Get <code>public.group_concat</code> as a field.
   */
  def groupConcat(
      __1: Field[String]
  ): AggregateFunction[String] = {
    val f = new GroupConcat
    f.set__1(__1)

    return f.asAggregateFunction
  }

  /**
   * Call <code>public.inventory_held_by_customer</code>
   */
  def inventoryHeldByCustomer(
      configuration: Configuration
    , pInventoryId: Long
  ): Integer = {
    val f = new InventoryHeldByCustomer()
    f.setPInventoryId(pInventoryId)

    f.execute(configuration)
    f.getReturnValue
  }

  /**
   * Get <code>public.inventory_held_by_customer</code> as a field.
   */
  def inventoryHeldByCustomer(
      pInventoryId: Long
  ): Field[Integer] = {
    val f = new InventoryHeldByCustomer
    f.setPInventoryId(pInventoryId)

    return f.asField
  }

  /**
   * Get <code>public.inventory_held_by_customer</code> as a field.
   */
  def inventoryHeldByCustomer(
      pInventoryId: Field[Long]
  ): Field[Integer] = {
    val f = new InventoryHeldByCustomer
    f.setPInventoryId(pInventoryId)

    return f.asField
  }

  /**
   * Call <code>public.inventory_in_stock</code>
   */
  def inventoryInStock(
      configuration: Configuration
    , pInventoryId: Long
  ): Boolean = {
    val f = new InventoryInStock()
    f.setPInventoryId(pInventoryId)

    f.execute(configuration)
    f.getReturnValue
  }

  /**
   * Get <code>public.inventory_in_stock</code> as a field.
   */
  def inventoryInStock(
      pInventoryId: Long
  ): Field[Boolean] = {
    val f = new InventoryInStock
    f.setPInventoryId(pInventoryId)

    return f.asField
  }

  /**
   * Get <code>public.inventory_in_stock</code> as a field.
   */
  def inventoryInStock(
      pInventoryId: Field[Long]
  ): Field[Boolean] = {
    val f = new InventoryInStock
    f.setPInventoryId(pInventoryId)

    return f.asField
  }

  /**
   * Call <code>public.last_day</code>
   */
  def lastDay(
      configuration: Configuration
    , __1: LocalDateTime
  ): LocalDate = {
    val f = new LastDay()
    f.set__1(__1)

    f.execute(configuration)
    f.getReturnValue
  }

  /**
   * Get <code>public.last_day</code> as a field.
   */
  def lastDay(
      __1: LocalDateTime
  ): Field[LocalDate] = {
    val f = new LastDay
    f.set__1(__1)

    return f.asField
  }

  /**
   * Get <code>public.last_day</code> as a field.
   */
  def lastDay(
      __1: Field[LocalDateTime]
  ): Field[LocalDate] = {
    val f = new LastDay
    f.set__1(__1)

    return f.asField
  }

  /**
   * Call <code>public.film_in_stock</code>.
   */
  def filmInStock(
      configuration: Configuration
    , pFilmId: Long
    , pStoreId: Long
  ): Result[FilmInStockRecord] = configuration.dsl().selectFrom(org.jooq.demo.skala.db.tables.FilmInStock.FILM_IN_STOCK.call(
      pFilmId
    , pStoreId
  )).fetch()

  /**
   * Get <code>public.film_in_stock</code> as a table.
   */
  def filmInStock(
      pFilmId: Long
    , pStoreId: Long
  ): FilmInStock = org.jooq.demo.skala.db.tables.FilmInStock.FILM_IN_STOCK.call(
    pFilmId,
    pStoreId
  )

  /**
   * Get <code>public.film_in_stock</code> as a table.
   */
  def filmInStock(
      pFilmId: Field[Long]
    , pStoreId: Field[Long]
  ): FilmInStock = org.jooq.demo.skala.db.tables.FilmInStock.FILM_IN_STOCK.call(
    pFilmId,
    pStoreId
  )

  /**
   * Call <code>public.film_not_in_stock</code>.
   */
  def filmNotInStock(
      configuration: Configuration
    , pFilmId: Long
    , pStoreId: Long
  ): Result[FilmNotInStockRecord] = configuration.dsl().selectFrom(org.jooq.demo.skala.db.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
      pFilmId
    , pStoreId
  )).fetch()

  /**
   * Get <code>public.film_not_in_stock</code> as a table.
   */
  def filmNotInStock(
      pFilmId: Long
    , pStoreId: Long
  ): FilmNotInStock = org.jooq.demo.skala.db.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
    pFilmId,
    pStoreId
  )

  /**
   * Get <code>public.film_not_in_stock</code> as a table.
   */
  def filmNotInStock(
      pFilmId: Field[Long]
    , pStoreId: Field[Long]
  ): FilmNotInStock = org.jooq.demo.skala.db.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
    pFilmId,
    pStoreId
  )

  /**
   * Call <code>public.rewards_report</code>.
   */
  def rewardsReport(
      configuration: Configuration
    , minMonthlyPurchases: Integer
    , minDollarAmountPurchased: BigDecimal
  ): Result[RewardsReportRecord] = configuration.dsl().selectFrom(org.jooq.demo.skala.db.tables.RewardsReport.REWARDS_REPORT.call(
      minMonthlyPurchases
    , minDollarAmountPurchased
  )).fetch()

  /**
   * Get <code>public.rewards_report</code> as a table.
   */
  def rewardsReport(
      minMonthlyPurchases: Integer
    , minDollarAmountPurchased: BigDecimal
  ): RewardsReport = org.jooq.demo.skala.db.tables.RewardsReport.REWARDS_REPORT.call(
    minMonthlyPurchases,
    minDollarAmountPurchased
  )

  /**
   * Get <code>public.rewards_report</code> as a table.
   */
  def rewardsReport(
      minMonthlyPurchases: Field[Integer]
    , minDollarAmountPurchased: Field[BigDecimal]
  ): RewardsReport = org.jooq.demo.skala.db.tables.RewardsReport.REWARDS_REPORT.call(
    minMonthlyPurchases,
    minDollarAmountPurchased
  )
}
