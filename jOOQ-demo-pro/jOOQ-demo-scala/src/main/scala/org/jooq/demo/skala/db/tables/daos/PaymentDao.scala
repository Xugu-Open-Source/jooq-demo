/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.daos


import java.lang.Long
import java.math.BigDecimal
import java.time.LocalDateTime
import java.util.List

import org.jooq.Configuration
import org.jooq.demo.skala.db.tables.Payment
import org.jooq.demo.skala.db.tables.records.PaymentRecord
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
class PaymentDao(configuration: Configuration) extends DAOImpl[PaymentRecord, org.jooq.demo.skala.db.tables.pojos.Payment, Long](Payment.PAYMENT, classOf[org.jooq.demo.skala.db.tables.pojos.Payment], configuration) {

  /**
   * Create a new PaymentDao without any configuration
   */
  def this() = this(null)

  override def getId(o: org.jooq.demo.skala.db.tables.pojos.Payment): Long = o.getPaymentId

  /**
   * Fetch records that have <code>payment_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfPaymentId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Payment] = fetchRange(Payment.PAYMENT.PAYMENT_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>payment_id IN (values)</code>
   */
  def fetchByPaymentId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Payment] = fetch(Payment.PAYMENT.PAYMENT_ID, values:_*)

  /**
   * Fetch a unique record that has <code>payment_id = value</code>
   */
  def fetchOneByPaymentId(value: Long): org.jooq.demo.skala.db.tables.pojos.Payment = fetchOne(Payment.PAYMENT.PAYMENT_ID, value)

  /**
   * Fetch records that have <code>customer_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfCustomerId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Payment] = fetchRange(Payment.PAYMENT.CUSTOMER_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>customer_id IN (values)</code>
   */
  def fetchByCustomerId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Payment] = fetch(Payment.PAYMENT.CUSTOMER_ID, values:_*)

  /**
   * Fetch records that have <code>staff_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfStaffId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Payment] = fetchRange(Payment.PAYMENT.STAFF_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>staff_id IN (values)</code>
   */
  def fetchByStaffId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Payment] = fetch(Payment.PAYMENT.STAFF_ID, values:_*)

  /**
   * Fetch records that have <code>rental_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfRentalId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Payment] = fetchRange(Payment.PAYMENT.RENTAL_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>rental_id IN (values)</code>
   */
  def fetchByRentalId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Payment] = fetch(Payment.PAYMENT.RENTAL_ID, values:_*)

  /**
   * Fetch records that have <code>amount BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfAmount(lowerInclusive: BigDecimal, upperInclusive: BigDecimal): List[org.jooq.demo.skala.db.tables.pojos.Payment] = fetchRange(Payment.PAYMENT.AMOUNT, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>amount IN (values)</code>
   */
  def fetchByAmount(values: BigDecimal*): List[org.jooq.demo.skala.db.tables.pojos.Payment] = fetch(Payment.PAYMENT.AMOUNT, values:_*)

  /**
   * Fetch records that have <code>payment_date BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfPaymentDate(lowerInclusive: LocalDateTime, upperInclusive: LocalDateTime): List[org.jooq.demo.skala.db.tables.pojos.Payment] = fetchRange(Payment.PAYMENT.PAYMENT_DATE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>payment_date IN (values)</code>
   */
  def fetchByPaymentDate(values: LocalDateTime*): List[org.jooq.demo.skala.db.tables.pojos.Payment] = fetch(Payment.PAYMENT.PAYMENT_DATE, values:_*)
}
