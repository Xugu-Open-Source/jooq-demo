/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables


import java.lang.Boolean
import java.lang.Class
import java.lang.Integer
import java.lang.Long
import java.lang.String
import java.math.BigDecimal
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.demo.skala.db.Public
import org.jooq.demo.skala.db.tables.records.RewardsReportRecord
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array


object RewardsReport {

  /**
   * The reference instance of <code>public.rewards_report</code>
   */
  val REWARDS_REPORT = new RewardsReport
}

/**
 * This class is generated by jOOQ.
 */
class RewardsReport(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, RewardsReportRecord],
  aliased: Table[RewardsReportRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[RewardsReportRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.function
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[RewardsReportRecord] = classOf[RewardsReportRecord]

  /**
   * The column <code>public.rewards_report.customer_id</code>.
   */
  val CUSTOMER_ID: TableField[RewardsReportRecord, Long] = createField(DSL.name("customer_id"), SQLDataType.BIGINT.nullable(false).identity(true).defaultValue(DSL.field("nextval('customer_customer_id_seq'::regclass)", SQLDataType.BIGINT)), "")

  /**
   * The column <code>public.rewards_report.store_id</code>.
   */
  val STORE_ID: TableField[RewardsReportRecord, Long] = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.rewards_report.first_name</code>.
   */
  val FIRST_NAME: TableField[RewardsReportRecord, String] = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45).nullable(false), "")

  /**
   * The column <code>public.rewards_report.last_name</code>.
   */
  val LAST_NAME: TableField[RewardsReportRecord, String] = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45).nullable(false), "")

  /**
   * The column <code>public.rewards_report.email</code>.
   */
  val EMAIL: TableField[RewardsReportRecord, String] = createField(DSL.name("email"), SQLDataType.VARCHAR(50), "")

  /**
   * The column <code>public.rewards_report.address_id</code>.
   */
  val ADDRESS_ID: TableField[RewardsReportRecord, Long] = createField(DSL.name("address_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.rewards_report.activebool</code>.
   */
  val ACTIVEBOOL: TableField[RewardsReportRecord, Boolean] = createField(DSL.name("activebool"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), "")

  /**
   * The column <code>public.rewards_report.create_date</code>.
   */
  val CREATE_DATE: TableField[RewardsReportRecord, LocalDate] = createField(DSL.name("create_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field("('now'::text)::date", SQLDataType.LOCALDATE)), "")

  /**
   * The column <code>public.rewards_report.last_update</code>.
   */
  val LAST_UPDATE: TableField[RewardsReportRecord, LocalDateTime] = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), "")

  /**
   * The column <code>public.rewards_report.active</code>.
   */
  val ACTIVE: TableField[RewardsReportRecord, Integer] = createField(DSL.name("active"), SQLDataType.INTEGER, "")

  private def this(alias: Name, aliased: Table[RewardsReportRecord]) = this(alias, null, null, aliased, Array(
    DSL.value(null, SQLDataType.INTEGER),
    DSL.value(null, SQLDataType.NUMERIC)
  ))

  /**
   * Create an aliased <code>public.rewards_report</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.demo.skala.db.tables.RewardsReport.REWARDS_REPORT)

  /**
   * Create an aliased <code>public.rewards_report</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.demo.skala.db.tables.RewardsReport.REWARDS_REPORT)

  /**
   * Create a <code>public.rewards_report</code> table reference
   */
  def this() = this(DSL.name("rewards_report"), null)

  override def getSchema: Schema = if (aliased()) null else Public.PUBLIC

  override def getIdentity: Identity[RewardsReportRecord, Long] = super.getIdentity.asInstanceOf[ Identity[RewardsReportRecord, Long] ]
  override def as(alias: String): RewardsReport = new RewardsReport(DSL.name(alias), null, null, this, parameters)
  override def as(alias: Name): RewardsReport = new RewardsReport(alias, null, null, this, parameters)
  override def as(alias: Table[_]): RewardsReport = new RewardsReport(alias.getQualifiedName(), null, null, this, parameters)

  /**
   * Rename this table
   */
  override def rename(name: String): RewardsReport = new RewardsReport(DSL.name(name), null, null, null, parameters)

  /**
   * Rename this table
   */
  override def rename(name: Name): RewardsReport = new RewardsReport(name, null, null, null, parameters)

  /**
   * Rename this table
   */
  override def rename(name: Table[_]): RewardsReport = new RewardsReport(name.getQualifiedName(), null, null, null, parameters)

  // -------------------------------------------------------------------------
  // Row10 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row10[Long, Long, String, String, String, Long, Boolean, LocalDate, LocalDateTime, Integer] = super.fieldsRow.asInstanceOf[ Row10[Long, Long, String, String, String, Long, Boolean, LocalDate, LocalDateTime, Integer] ]

  /**
   * Call this table-valued function
   */
  def call(
      minMonthlyPurchases: Integer
    , minDollarAmountPurchased: BigDecimal
  ): RewardsReport = Option(new RewardsReport(DSL.name("rewards_report"), null, null, null, Array(
    DSL.value(minMonthlyPurchases, SQLDataType.INTEGER),
    DSL.value(minDollarAmountPurchased, SQLDataType.NUMERIC)
  ))).map(r => if (aliased()) r.as(getUnqualifiedName) else r).get

  /**
   * Call this table-valued function
   */
  def call(
      minMonthlyPurchases: Field[Integer]
    , minDollarAmountPurchased: Field[BigDecimal]
  ): RewardsReport = Option(new RewardsReport(DSL.name("rewards_report"), null, null, null, Array(
    minMonthlyPurchases,
    minDollarAmountPurchased
  ))).map(r => if (aliased()) r.as(getUnqualifiedName) else r).get

  /**
   * Convenience mapping calling {@link #convertFrom(Function)}.
   */
  def mapping[U](from: (Long, Long, String, String, String, Long, Boolean, LocalDate, LocalDateTime, Integer) => U): SelectField[U] = convertFrom(r => from.apply(r.value1(), r.value2(), r.value3(), r.value4(), r.value5(), r.value6(), r.value7(), r.value8(), r.value9(), r.value10()))

  /**
   * Convenience mapping calling {@link #convertFrom(Class, Function)}.
   */
  def mapping[U](toType: Class[U], from: (Long, Long, String, String, String, Long, Boolean, LocalDate, LocalDateTime, Integer) => U): SelectField[U] = convertFrom(toType,r => from.apply(r.value1(), r.value2(), r.value3(), r.value4(), r.value5(), r.value6(), r.value7(), r.value8(), r.value9(), r.value10()))
}
