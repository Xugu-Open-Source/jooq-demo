/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables


import java.lang.Boolean
import java.lang.Class
import java.lang.Integer
import java.lang.Long
import java.lang.String
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.Arrays
import java.util.List
import java.util.function.Function

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Result
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableLike
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.demo.skala.db.Indexes
import org.jooq.demo.skala.db.Keys
import org.jooq.demo.skala.db.Public
import org.jooq.demo.skala.db.tables.records.AddressRecord
import org.jooq.demo.skala.db.tables.records.CustomerRecord
import org.jooq.demo.skala.db.tables.records.PaymentP2007_01Record
import org.jooq.demo.skala.db.tables.records.PaymentP2007_02Record
import org.jooq.demo.skala.db.tables.records.PaymentP2007_03Record
import org.jooq.demo.skala.db.tables.records.PaymentP2007_04Record
import org.jooq.demo.skala.db.tables.records.PaymentP2007_05Record
import org.jooq.demo.skala.db.tables.records.PaymentP2007_06Record
import org.jooq.demo.skala.db.tables.records.PaymentRecord
import org.jooq.demo.skala.db.tables.records.RentalRecord
import org.jooq.demo.skala.db.tables.records.StoreRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array


object Customer {

  /**
   * The reference instance of <code>public.customer</code>
   */
  val CUSTOMER = new Customer
}

/**
 * This class is generated by jOOQ.
 */
class Customer(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, CustomerRecord],
  aliased: Table[CustomerRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[CustomerRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[CustomerRecord] = classOf[CustomerRecord]

  /**
   * The column <code>public.customer.customer_id</code>.
   */
  val CUSTOMER_ID: TableField[CustomerRecord, Long] = createField(DSL.name("customer_id"), SQLDataType.BIGINT.nullable(false).identity(true), "")

  /**
   * The column <code>public.customer.store_id</code>.
   */
  val STORE_ID: TableField[CustomerRecord, Long] = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.customer.first_name</code>.
   */
  val FIRST_NAME: TableField[CustomerRecord, String] = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45).nullable(false), "")

  /**
   * The column <code>public.customer.last_name</code>.
   */
  val LAST_NAME: TableField[CustomerRecord, String] = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45).nullable(false), "")

  /**
   * The column <code>public.customer.email</code>.
   */
  val EMAIL: TableField[CustomerRecord, String] = createField(DSL.name("email"), SQLDataType.VARCHAR(50), "")

  /**
   * The column <code>public.customer.address_id</code>.
   */
  val ADDRESS_ID: TableField[CustomerRecord, Long] = createField(DSL.name("address_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.customer.activebool</code>.
   */
  val ACTIVEBOOL: TableField[CustomerRecord, Boolean] = createField(DSL.name("activebool"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), "")

  /**
   * The column <code>public.customer.create_date</code>.
   */
  val CREATE_DATE: TableField[CustomerRecord, LocalDate] = createField(DSL.name("create_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field("('now'::text)::date", SQLDataType.LOCALDATE)), "")

  /**
   * The column <code>public.customer.last_update</code>.
   */
  val LAST_UPDATE: TableField[CustomerRecord, LocalDateTime] = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), "")

  /**
   * The column <code>public.customer.active</code>.
   */
  val ACTIVE: TableField[CustomerRecord, Integer] = createField(DSL.name("active"), SQLDataType.INTEGER, "")

  private def this(alias: Name, aliased: Table[CustomerRecord]) = this(alias, null, null, aliased, null)

  /**
   * Create an aliased <code>public.customer</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.demo.skala.db.tables.Customer.CUSTOMER)

  /**
   * Create an aliased <code>public.customer</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.demo.skala.db.tables.Customer.CUSTOMER)

  /**
   * Create a <code>public.customer</code> table reference
   */
  def this() = this(DSL.name("customer"), null)

  def this(child: Table[_ <: Record], key: ForeignKey[_ <: Record, CustomerRecord]) = this(Internal.createPathAlias(child, key), child, key, org.jooq.demo.skala.db.tables.Customer.CUSTOMER, null)

  override def getSchema: Schema = if (aliased()) null else Public.PUBLIC

  override def getIndexes: List[Index] = Arrays.asList[ Index ](Indexes.IDX_FK_ADDRESS_ID, Indexes.IDX_FK_STORE_ID, Indexes.IDX_LAST_NAME)

  override def getIdentity: Identity[CustomerRecord, Long] = super.getIdentity.asInstanceOf[ Identity[CustomerRecord, Long] ]

  override def getPrimaryKey: UniqueKey[CustomerRecord] = Keys.CUSTOMER_PKEY

  override def getReferences: List[ ForeignKey[CustomerRecord, _] ] = Arrays.asList[ ForeignKey[CustomerRecord, _] ](Keys.CUSTOMER__CUSTOMER_STORE_ID_FKEY, Keys.CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY)

  /**
   * Get the implicit join path to the <code>public.store</code> table.
   */
  lazy val store: Store = { new Store(this, Keys.CUSTOMER__CUSTOMER_STORE_ID_FKEY) }

  /**
   * Get the implicit join path to the <code>public.address</code> table.
   */
  lazy val address: Address = { new Address(this, Keys.CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY) }

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment</code> one-to-many child table.
   */
  def paymentExists(): Condition = paymentExists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment</code> one-to-many child table.
   */
  def paymentExists[O <: Record](subquery: (Payment) => TableLike[O]): Condition = oneToManyExists(Keys.PAYMENT__PAYMENT_CUSTOMER_ID_FKEY, (t: Table[PaymentRecord]) => subquery(t.asInstanceOf[Payment]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment_p2007_01</code> one-to-many child table.
   */
  def paymentP2007_01Exists(): Condition = paymentP2007_01Exists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment_p2007_01</code> one-to-many child table.
   */
  def paymentP2007_01Exists[O <: Record](subquery: (PaymentP2007_01) => TableLike[O]): Condition = oneToManyExists(Keys.PAYMENT_P2007_01__PAYMENT_P2007_01_CUSTOMER_ID_FKEY, (t: Table[PaymentP2007_01Record]) => subquery(t.asInstanceOf[PaymentP2007_01]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment_p2007_02</code> one-to-many child table.
   */
  def paymentP2007_02Exists(): Condition = paymentP2007_02Exists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment_p2007_02</code> one-to-many child table.
   */
  def paymentP2007_02Exists[O <: Record](subquery: (PaymentP2007_02) => TableLike[O]): Condition = oneToManyExists(Keys.PAYMENT_P2007_02__PAYMENT_P2007_02_CUSTOMER_ID_FKEY, (t: Table[PaymentP2007_02Record]) => subquery(t.asInstanceOf[PaymentP2007_02]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment_p2007_03</code> one-to-many child table.
   */
  def paymentP2007_03Exists(): Condition = paymentP2007_03Exists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment_p2007_03</code> one-to-many child table.
   */
  def paymentP2007_03Exists[O <: Record](subquery: (PaymentP2007_03) => TableLike[O]): Condition = oneToManyExists(Keys.PAYMENT_P2007_03__PAYMENT_P2007_03_CUSTOMER_ID_FKEY, (t: Table[PaymentP2007_03Record]) => subquery(t.asInstanceOf[PaymentP2007_03]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment_p2007_04</code> one-to-many child table.
   */
  def paymentP2007_04Exists(): Condition = paymentP2007_04Exists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment_p2007_04</code> one-to-many child table.
   */
  def paymentP2007_04Exists[O <: Record](subquery: (PaymentP2007_04) => TableLike[O]): Condition = oneToManyExists(Keys.PAYMENT_P2007_04__PAYMENT_P2007_04_CUSTOMER_ID_FKEY, (t: Table[PaymentP2007_04Record]) => subquery(t.asInstanceOf[PaymentP2007_04]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment_p2007_05</code> one-to-many child table.
   */
  def paymentP2007_05Exists(): Condition = paymentP2007_05Exists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment_p2007_05</code> one-to-many child table.
   */
  def paymentP2007_05Exists[O <: Record](subquery: (PaymentP2007_05) => TableLike[O]): Condition = oneToManyExists(Keys.PAYMENT_P2007_05__PAYMENT_P2007_05_CUSTOMER_ID_FKEY, (t: Table[PaymentP2007_05Record]) => subquery(t.asInstanceOf[PaymentP2007_05]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment_p2007_06</code> one-to-many child table.
   */
  def paymentP2007_06Exists(): Condition = paymentP2007_06Exists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.payment_p2007_06</code> one-to-many child table.
   */
  def paymentP2007_06Exists[O <: Record](subquery: (PaymentP2007_06) => TableLike[O]): Condition = oneToManyExists(Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_CUSTOMER_ID_FKEY, (t: Table[PaymentP2007_06Record]) => subquery(t.asInstanceOf[PaymentP2007_06]))

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.rental</code> one-to-many child table.
   */
  def rentalExists(): Condition = rentalExists(t => t)

  /**
   * A convenience constructor for correlated <code>EXISTS</code>s expressions
   * to the <code>public.rental</code> one-to-many child table.
   */
  def rentalExists[O <: Record](subquery: (Rental) => TableLike[O]): Condition = oneToManyExists(Keys.RENTAL__RENTAL_CUSTOMER_ID_FKEY, (t: Table[RentalRecord]) => subquery(t.asInstanceOf[Rental]))

  /**
   * A convenience constructor for correlated <code>ROW</code>s expressions to
   * the <code>public.customer</code> to-one parent table.
   */
  def storeRow(): Field[StoreRecord] = storeRow(t => t)

  /**
   * A convenience constructor for correlated <code>ROW</code>s expressions to
   * the <code>public.customer</code> to-one parent table.
   */
  def storeRow[O <: Record](subquery: (Store) => TableLike[O]): Field[O] = toOneRow(Keys.CUSTOMER__CUSTOMER_STORE_ID_FKEY, (t: Table[StoreRecord]) => subquery(t.asInstanceOf[Store]))

  /**
   * A convenience constructor for correlated <code>ROW</code>s expressions to
   * the <code>public.customer</code> to-one parent table.
   */
  def addressRow(): Field[AddressRecord] = addressRow(t => t)

  /**
   * A convenience constructor for correlated <code>ROW</code>s expressions to
   * the <code>public.customer</code> to-one parent table.
   */
  def addressRow[O <: Record](subquery: (Address) => TableLike[O]): Field[O] = toOneRow(Keys.CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY, (t: Table[AddressRecord]) => subquery(t.asInstanceOf[Address]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment</code> one-to-many child table.
   */
  def paymentMultiset(): Field[Result[PaymentRecord]] = paymentMultiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment</code> one-to-many child table.
   */
  def paymentMultiset[O <: Record](subquery: (Payment) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.PAYMENT__PAYMENT_CUSTOMER_ID_FKEY, (t: Table[PaymentRecord]) => subquery(t.asInstanceOf[Payment]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment_p2007_01</code> one-to-many child table.
   */
  def paymentP2007_01Multiset(): Field[Result[PaymentP2007_01Record]] = paymentP2007_01Multiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment_p2007_01</code> one-to-many child table.
   */
  def paymentP2007_01Multiset[O <: Record](subquery: (PaymentP2007_01) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.PAYMENT_P2007_01__PAYMENT_P2007_01_CUSTOMER_ID_FKEY, (t: Table[PaymentP2007_01Record]) => subquery(t.asInstanceOf[PaymentP2007_01]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment_p2007_02</code> one-to-many child table.
   */
  def paymentP2007_02Multiset(): Field[Result[PaymentP2007_02Record]] = paymentP2007_02Multiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment_p2007_02</code> one-to-many child table.
   */
  def paymentP2007_02Multiset[O <: Record](subquery: (PaymentP2007_02) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.PAYMENT_P2007_02__PAYMENT_P2007_02_CUSTOMER_ID_FKEY, (t: Table[PaymentP2007_02Record]) => subquery(t.asInstanceOf[PaymentP2007_02]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment_p2007_03</code> one-to-many child table.
   */
  def paymentP2007_03Multiset(): Field[Result[PaymentP2007_03Record]] = paymentP2007_03Multiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment_p2007_03</code> one-to-many child table.
   */
  def paymentP2007_03Multiset[O <: Record](subquery: (PaymentP2007_03) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.PAYMENT_P2007_03__PAYMENT_P2007_03_CUSTOMER_ID_FKEY, (t: Table[PaymentP2007_03Record]) => subquery(t.asInstanceOf[PaymentP2007_03]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment_p2007_04</code> one-to-many child table.
   */
  def paymentP2007_04Multiset(): Field[Result[PaymentP2007_04Record]] = paymentP2007_04Multiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment_p2007_04</code> one-to-many child table.
   */
  def paymentP2007_04Multiset[O <: Record](subquery: (PaymentP2007_04) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.PAYMENT_P2007_04__PAYMENT_P2007_04_CUSTOMER_ID_FKEY, (t: Table[PaymentP2007_04Record]) => subquery(t.asInstanceOf[PaymentP2007_04]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment_p2007_05</code> one-to-many child table.
   */
  def paymentP2007_05Multiset(): Field[Result[PaymentP2007_05Record]] = paymentP2007_05Multiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment_p2007_05</code> one-to-many child table.
   */
  def paymentP2007_05Multiset[O <: Record](subquery: (PaymentP2007_05) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.PAYMENT_P2007_05__PAYMENT_P2007_05_CUSTOMER_ID_FKEY, (t: Table[PaymentP2007_05Record]) => subquery(t.asInstanceOf[PaymentP2007_05]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment_p2007_06</code> one-to-many child table.
   */
  def paymentP2007_06Multiset(): Field[Result[PaymentP2007_06Record]] = paymentP2007_06Multiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.payment_p2007_06</code> one-to-many child table.
   */
  def paymentP2007_06Multiset[O <: Record](subquery: (PaymentP2007_06) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_CUSTOMER_ID_FKEY, (t: Table[PaymentP2007_06Record]) => subquery(t.asInstanceOf[PaymentP2007_06]))

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.rental</code> one-to-many child table.
   */
  def rentalMultiset(): Field[Result[RentalRecord]] = rentalMultiset(t => t)

  /**
   * A convenience constructor for correlated <code>MULTISET</code>s expressions
   * to the <code>public.rental</code> one-to-many child table.
   */
  def rentalMultiset[O <: Record](subquery: (Rental) => TableLike[O]): Field[Result[O]] = oneToManyMultiset(Keys.RENTAL__RENTAL_CUSTOMER_ID_FKEY, (t: Table[RentalRecord]) => subquery(t.asInstanceOf[Rental]))
  override def as(alias: String): Customer = new Customer(DSL.name(alias), this)
  override def as(alias: Name): Customer = new Customer(alias, this)
  override def as(alias: Table[_]): Customer = new Customer(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): Customer = new Customer(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Customer = new Customer(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[_]): Customer = new Customer(name.getQualifiedName(), null)

  // -------------------------------------------------------------------------
  // Row10 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row10[Long, Long, String, String, String, Long, Boolean, LocalDate, LocalDateTime, Integer] = super.fieldsRow.asInstanceOf[ Row10[Long, Long, String, String, String, Long, Boolean, LocalDate, LocalDateTime, Integer] ]

  /**
   * Convenience mapping calling {@link #convertFrom(Function)}.
   */
  def mapping[U](from: (Long, Long, String, String, String, Long, Boolean, LocalDate, LocalDateTime, Integer) => U): SelectField[U] = convertFrom(r => from.apply(r.value1(), r.value2(), r.value3(), r.value4(), r.value5(), r.value6(), r.value7(), r.value8(), r.value9(), r.value10()))

  /**
   * Convenience mapping calling {@link #convertFrom(Class, Function)}.
   */
  def mapping[U](toType: Class[U], from: (Long, Long, String, String, String, Long, Boolean, LocalDate, LocalDateTime, Integer) => U): SelectField[U] = convertFrom(toType,r => from.apply(r.value1(), r.value2(), r.value3(), r.value4(), r.value5(), r.value6(), r.value7(), r.value8(), r.value9(), r.value10()))
}
