/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.records


import java.lang.Long
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.demo.skala.db.tables.Rental
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
class RentalRecord extends UpdatableRecordImpl[RentalRecord](Rental.RENTAL) with Record7[Long, LocalDateTime, Long, Long, LocalDateTime, Long, LocalDateTime] {

  /**
   * Setter for <code>public.rental.rental_id</code>.
   */
  def setRentalId(value: Long): Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>public.rental.rental_id</code>.
   */
  def getRentalId: Long = get(0).asInstanceOf[Long]

  /**
   * Setter for <code>public.rental.rental_date</code>.
   */
  def setRentalDate(value: LocalDateTime): Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>public.rental.rental_date</code>.
   */
  def getRentalDate: LocalDateTime = get(1).asInstanceOf[LocalDateTime]

  /**
   * Setter for <code>public.rental.inventory_id</code>.
   */
  def setInventoryId(value: Long): Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>public.rental.inventory_id</code>.
   */
  def getInventoryId: Long = get(2).asInstanceOf[Long]

  /**
   * Setter for <code>public.rental.customer_id</code>.
   */
  def setCustomerId(value: Long): Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>public.rental.customer_id</code>.
   */
  def getCustomerId: Long = get(3).asInstanceOf[Long]

  /**
   * Setter for <code>public.rental.return_date</code>.
   */
  def setReturnDate(value: LocalDateTime): Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>public.rental.return_date</code>.
   */
  def getReturnDate: LocalDateTime = get(4).asInstanceOf[LocalDateTime]

  /**
   * Setter for <code>public.rental.staff_id</code>.
   */
  def setStaffId(value: Long): Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>public.rental.staff_id</code>.
   */
  def getStaffId: Long = get(5).asInstanceOf[Long]

  /**
   * Setter for <code>public.rental.last_update</code>.
   */
  def setLastUpdate(value: LocalDateTime): Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>public.rental.last_update</code>.
   */
  def getLastUpdate: LocalDateTime = get(6).asInstanceOf[LocalDateTime]

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override def key: Record1[Long] = super.key.asInstanceOf[ Record1[Long] ]

  // -------------------------------------------------------------------------
  // Record7 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow: Row7[Long, LocalDateTime, Long, Long, LocalDateTime, Long, LocalDateTime] = super.fieldsRow.asInstanceOf[ Row7[Long, LocalDateTime, Long, Long, LocalDateTime, Long, LocalDateTime] ]

  override def valuesRow: Row7[Long, LocalDateTime, Long, Long, LocalDateTime, Long, LocalDateTime] = super.valuesRow.asInstanceOf[ Row7[Long, LocalDateTime, Long, Long, LocalDateTime, Long, LocalDateTime] ]
  override def field1: Field[Long] = Rental.RENTAL.RENTAL_ID
  override def field2: Field[LocalDateTime] = Rental.RENTAL.RENTAL_DATE
  override def field3: Field[Long] = Rental.RENTAL.INVENTORY_ID
  override def field4: Field[Long] = Rental.RENTAL.CUSTOMER_ID
  override def field5: Field[LocalDateTime] = Rental.RENTAL.RETURN_DATE
  override def field6: Field[Long] = Rental.RENTAL.STAFF_ID
  override def field7: Field[LocalDateTime] = Rental.RENTAL.LAST_UPDATE
  override def component1: Long = getRentalId
  override def component2: LocalDateTime = getRentalDate
  override def component3: Long = getInventoryId
  override def component4: Long = getCustomerId
  override def component5: LocalDateTime = getReturnDate
  override def component6: Long = getStaffId
  override def component7: LocalDateTime = getLastUpdate
  override def value1: Long = getRentalId
  override def value2: LocalDateTime = getRentalDate
  override def value3: Long = getInventoryId
  override def value4: Long = getCustomerId
  override def value5: LocalDateTime = getReturnDate
  override def value6: Long = getStaffId
  override def value7: LocalDateTime = getLastUpdate

  override def value1(value: Long): RentalRecord = {
    setRentalId(value)
    this
  }

  override def value2(value: LocalDateTime): RentalRecord = {
    setRentalDate(value)
    this
  }

  override def value3(value: Long): RentalRecord = {
    setInventoryId(value)
    this
  }

  override def value4(value: Long): RentalRecord = {
    setCustomerId(value)
    this
  }

  override def value5(value: LocalDateTime): RentalRecord = {
    setReturnDate(value)
    this
  }

  override def value6(value: Long): RentalRecord = {
    setStaffId(value)
    this
  }

  override def value7(value: LocalDateTime): RentalRecord = {
    setLastUpdate(value)
    this
  }

  override def values(value1 : Long, value2 : LocalDateTime, value3 : Long, value4 : Long, value5 : LocalDateTime, value6 : Long, value7 : LocalDateTime): RentalRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this
  }

  /**
   * Create a detached, initialised RentalRecord
   */
  def this(rentalId : Long, rentalDate : LocalDateTime, inventoryId : Long, customerId : Long, returnDate : LocalDateTime, staffId : Long, lastUpdate : LocalDateTime) = {
    this()

    this.setRentalId(rentalId)
    this.setRentalDate(rentalDate)
    this.setInventoryId(inventoryId)
    this.setCustomerId(customerId)
    this.setReturnDate(returnDate)
    this.setStaffId(staffId)
    this.setLastUpdate(lastUpdate)
    resetChangedOnNotNull()
  }

  /**
   * Create a detached, initialised RentalRecord
   */
  def this(rentalId : Long, rentalDate : LocalDateTime, inventoryId : Long, customerId : Long, returnDate : LocalDateTime, staffId : Long) = {
    this()

    this.setRentalId(rentalId)
    this.setRentalDate(rentalDate)
    this.setInventoryId(inventoryId)
    this.setCustomerId(customerId)
    this.setReturnDate(returnDate)
    this.setStaffId(staffId)
    resetChangedOnNotNull()
  }

  /**
   * Create a detached, initialised RentalRecord
   */
  def this(value: org.jooq.demo.skala.db.tables.pojos.Rental) = {
    this()

    if (value != null) {
      this.setRentalId(value.getRentalId)
      this.setRentalDate(value.getRentalDate)
      this.setInventoryId(value.getInventoryId)
      this.setCustomerId(value.getCustomerId)
      this.setReturnDate(value.getReturnDate)
      this.setStaffId(value.getStaffId)
      this.setLastUpdate(value.getLastUpdate)
      resetChangedOnNotNull()
    }
  }
}
