/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.records


import java.lang.Long
import java.lang.String
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.demo.skala.db.tables.Country
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
class CountryRecord extends UpdatableRecordImpl[CountryRecord](Country.COUNTRY) with Record3[Long, String, LocalDateTime] {

  /**
   * Setter for <code>public.country.country_id</code>.
   */
  def setCountryId(value: Long): Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>public.country.country_id</code>.
   */
  def getCountryId: Long = get(0).asInstanceOf[Long]

  /**
   * Setter for <code>public.country.country</code>.
   */
  def setCountry(value: String): Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>public.country.country</code>.
   */
  def getCountry: String = get(1).asInstanceOf[String]

  /**
   * Setter for <code>public.country.last_update</code>.
   */
  def setLastUpdate(value: LocalDateTime): Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>public.country.last_update</code>.
   */
  def getLastUpdate: LocalDateTime = get(2).asInstanceOf[LocalDateTime]

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override def key: Record1[Long] = super.key.asInstanceOf[ Record1[Long] ]

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow: Row3[Long, String, LocalDateTime] = super.fieldsRow.asInstanceOf[ Row3[Long, String, LocalDateTime] ]

  override def valuesRow: Row3[Long, String, LocalDateTime] = super.valuesRow.asInstanceOf[ Row3[Long, String, LocalDateTime] ]
  override def field1: Field[Long] = Country.COUNTRY.COUNTRY_ID
  override def field2: Field[String] = Country.COUNTRY.COUNTRY_
  override def field3: Field[LocalDateTime] = Country.COUNTRY.LAST_UPDATE
  override def component1: Long = getCountryId
  override def component2: String = getCountry
  override def component3: LocalDateTime = getLastUpdate
  override def value1: Long = getCountryId
  override def value2: String = getCountry
  override def value3: LocalDateTime = getLastUpdate

  override def value1(value: Long): CountryRecord = {
    setCountryId(value)
    this
  }

  override def value2(value: String): CountryRecord = {
    setCountry(value)
    this
  }

  override def value3(value: LocalDateTime): CountryRecord = {
    setLastUpdate(value)
    this
  }

  override def values(value1 : Long, value2 : String, value3 : LocalDateTime): CountryRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this
  }

  /**
   * Create a detached, initialised CountryRecord
   */
  def this(countryId : Long, country : String, lastUpdate : LocalDateTime) = {
    this()

    this.setCountryId(countryId)
    this.setCountry(country)
    this.setLastUpdate(lastUpdate)
    resetChangedOnNotNull()
  }

  /**
   * Create a detached, initialised CountryRecord
   */
  def this(countryId : Long, country : String) = {
    this()

    this.setCountryId(countryId)
    this.setCountry(country)
    resetChangedOnNotNull()
  }

  /**
   * Create a detached, initialised CountryRecord
   */
  def this(value: org.jooq.demo.skala.db.tables.pojos.Country) = {
    this()

    if (value != null) {
      this.setCountryId(value.getCountryId)
      this.setCountry(value.getCountry)
      this.setLastUpdate(value.getLastUpdate)
      resetChangedOnNotNull()
    }
  }
}
