/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.records


import java.lang.Long
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.demo.skala.db.tables.FilmCategory
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
class FilmCategoryRecord extends UpdatableRecordImpl[FilmCategoryRecord](FilmCategory.FILM_CATEGORY) with Record3[Long, Long, LocalDateTime] {

  /**
   * Setter for <code>public.film_category.film_id</code>.
   */
  def setFilmId(value: Long): Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>public.film_category.film_id</code>.
   */
  def getFilmId: Long = get(0).asInstanceOf[Long]

  /**
   * Setter for <code>public.film_category.category_id</code>.
   */
  def setCategoryId(value: Long): Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>public.film_category.category_id</code>.
   */
  def getCategoryId: Long = get(1).asInstanceOf[Long]

  /**
   * Setter for <code>public.film_category.last_update</code>.
   */
  def setLastUpdate(value: LocalDateTime): Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>public.film_category.last_update</code>.
   */
  def getLastUpdate: LocalDateTime = get(2).asInstanceOf[LocalDateTime]

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override def key: Record2[Long, Long] = super.key.asInstanceOf[ Record2[Long, Long] ]

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow: Row3[Long, Long, LocalDateTime] = super.fieldsRow.asInstanceOf[ Row3[Long, Long, LocalDateTime] ]

  override def valuesRow: Row3[Long, Long, LocalDateTime] = super.valuesRow.asInstanceOf[ Row3[Long, Long, LocalDateTime] ]
  override def field1: Field[Long] = FilmCategory.FILM_CATEGORY.FILM_ID
  override def field2: Field[Long] = FilmCategory.FILM_CATEGORY.CATEGORY_ID
  override def field3: Field[LocalDateTime] = FilmCategory.FILM_CATEGORY.LAST_UPDATE
  override def component1: Long = getFilmId
  override def component2: Long = getCategoryId
  override def component3: LocalDateTime = getLastUpdate
  override def value1: Long = getFilmId
  override def value2: Long = getCategoryId
  override def value3: LocalDateTime = getLastUpdate

  override def value1(value: Long): FilmCategoryRecord = {
    setFilmId(value)
    this
  }

  override def value2(value: Long): FilmCategoryRecord = {
    setCategoryId(value)
    this
  }

  override def value3(value: LocalDateTime): FilmCategoryRecord = {
    setLastUpdate(value)
    this
  }

  override def values(value1 : Long, value2 : Long, value3 : LocalDateTime): FilmCategoryRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this
  }

  /**
   * Create a detached, initialised FilmCategoryRecord
   */
  def this(filmId : Long, categoryId : Long, lastUpdate : LocalDateTime) = {
    this()

    this.setFilmId(filmId)
    this.setCategoryId(categoryId)
    this.setLastUpdate(lastUpdate)
    resetChangedOnNotNull()
  }

  /**
   * Create a detached, initialised FilmCategoryRecord
   */
  def this(filmId : Long, categoryId : Long) = {
    this()

    this.setFilmId(filmId)
    this.setCategoryId(categoryId)
    resetChangedOnNotNull()
  }

  /**
   * Create a detached, initialised FilmCategoryRecord
   */
  def this(value: org.jooq.demo.skala.db.tables.pojos.FilmCategory) = {
    this()

    if (value != null) {
      this.setFilmId(value.getFilmId)
      this.setCategoryId(value.getCategoryId)
      this.setLastUpdate(value.getLastUpdate)
      resetChangedOnNotNull()
    }
  }
}
