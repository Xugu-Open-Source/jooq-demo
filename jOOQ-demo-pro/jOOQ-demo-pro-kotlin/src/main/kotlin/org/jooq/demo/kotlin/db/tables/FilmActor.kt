/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables


import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableLike
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.demo.kotlin.db.Public
import org.jooq.demo.kotlin.db.indexes.IDX_FK_FILM_ID
import org.jooq.demo.kotlin.db.keys.FILM_ACTOR_PKEY
import org.jooq.demo.kotlin.db.keys.FILM_ACTOR__FILM_ACTOR_ACTOR_ID_FKEY
import org.jooq.demo.kotlin.db.keys.FILM_ACTOR__FILM_ACTOR_FILM_ID_FKEY
import org.jooq.demo.kotlin.db.tables.records.ActorRecord
import org.jooq.demo.kotlin.db.tables.records.FilmActorRecord
import org.jooq.demo.kotlin.db.tables.records.FilmRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FilmActor(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, FilmActorRecord>?,
    aliased: Table<FilmActorRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<FilmActorRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.film_actor</code>
         */
        val FILM_ACTOR: FilmActor = FilmActor()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FilmActorRecord> = FilmActorRecord::class.java

    /**
     * The column <code>public.film_actor.actor_id</code>.
     */
    val ACTOR_ID: TableField<FilmActorRecord, Long?> = createField(DSL.name("actor_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.film_actor.film_id</code>.
     */
    val FILM_ID: TableField<FilmActorRecord, Long?> = createField(DSL.name("film_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.film_actor.last_update</code>.
     */
    val LAST_UPDATE: TableField<FilmActorRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<FilmActorRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<FilmActorRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.film_actor</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.film_actor</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.film_actor</code> table reference
     */
    constructor(): this(DSL.name("film_actor"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, FilmActorRecord>): this(Internal.createPathAlias(child, key), child, key, FILM_ACTOR, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_FK_FILM_ID)
    override fun getPrimaryKey(): UniqueKey<FilmActorRecord> = FILM_ACTOR_PKEY
    override fun getReferences(): List<ForeignKey<FilmActorRecord, *>> = listOf(FILM_ACTOR__FILM_ACTOR_ACTOR_ID_FKEY, FILM_ACTOR__FILM_ACTOR_FILM_ID_FKEY)

    private lateinit var _actor: Actor
    private lateinit var _film: Film

    /**
     * Get the implicit join path to the <code>public.actor</code> table.
     */
    fun actor(): Actor {
        if (!this::_actor.isInitialized)
            _actor = Actor(this, FILM_ACTOR__FILM_ACTOR_ACTOR_ID_FKEY)

        return _actor;
    }

    val actor: Actor
        get(): Actor = actor()

    /**
     * Get the implicit join path to the <code>public.film</code> table.
     */
    fun film(): Film {
        if (!this::_film.isInitialized)
            _film = Film(this, FILM_ACTOR__FILM_ACTOR_FILM_ID_FKEY)

        return _film;
    }

    val film: Film
        get(): Film = film()

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.film_actor</code> to-one parent table.
     */
    fun actorRow(): Field<ActorRecord> = actorRow { it }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.film_actor</code> to-one parent table.
     */
    fun <O : Record> actorRow(subquery: (Actor) -> TableLike<O>): Field<O> = toOneRow(FILM_ACTOR__FILM_ACTOR_ACTOR_ID_FKEY, { subquery(it as Actor) })

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.film_actor</code> to-one parent table.
     */
    fun filmRow(): Field<FilmRecord> = filmRow { it }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.film_actor</code> to-one parent table.
     */
    fun <O : Record> filmRow(subquery: (Film) -> TableLike<O>): Field<O> = toOneRow(FILM_ACTOR__FILM_ACTOR_FILM_ID_FKEY, { subquery(it as Film) })
    override fun `as`(alias: String): FilmActor = FilmActor(DSL.name(alias), this)
    override fun `as`(alias: Name): FilmActor = FilmActor(alias, this)
    override fun `as`(alias: Table<*>): FilmActor = FilmActor(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): FilmActor = FilmActor(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): FilmActor = FilmActor(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): FilmActor = FilmActor(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Long?, Long?, LocalDateTime?> = super.fieldsRow() as Row3<Long?, Long?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
