/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.java.db.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Result;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableLike;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.demo.java.db.Keys;
import org.jooq.demo.java.db.Public;
import org.jooq.demo.java.db.tables.records.AddressRecord;
import org.jooq.demo.java.db.tables.records.PaymentP2007_01Record;
import org.jooq.demo.java.db.tables.records.PaymentP2007_02Record;
import org.jooq.demo.java.db.tables.records.PaymentP2007_03Record;
import org.jooq.demo.java.db.tables.records.PaymentP2007_04Record;
import org.jooq.demo.java.db.tables.records.PaymentP2007_05Record;
import org.jooq.demo.java.db.tables.records.PaymentP2007_06Record;
import org.jooq.demo.java.db.tables.records.PaymentRecord;
import org.jooq.demo.java.db.tables.records.RentalRecord;
import org.jooq.demo.java.db.tables.records.StaffRecord;
import org.jooq.demo.java.db.tables.records.StoreRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Staff extends TableImpl<StaffRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.staff</code>
     */
    public static final Staff STAFF = new Staff();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StaffRecord> getRecordType() {
        return StaffRecord.class;
    }

    /**
     * The column <code>public.staff.staff_id</code>.
     */
    public final TableField<StaffRecord, Long> STAFF_ID = createField(DSL.name("staff_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.staff.first_name</code>.
     */
    public final TableField<StaffRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>public.staff.last_name</code>.
     */
    public final TableField<StaffRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>public.staff.address_id</code>.
     */
    public final TableField<StaffRecord, Long> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.staff.email</code>.
     */
    public final TableField<StaffRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.staff.store_id</code>.
     */
    public final TableField<StaffRecord, Long> STORE_ID = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.staff.active</code>.
     */
    public final TableField<StaffRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.staff.username</code>.
     */
    public final TableField<StaffRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>public.staff.password</code>.
     */
    public final TableField<StaffRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>public.staff.last_update</code>.
     */
    public final TableField<StaffRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.staff.picture</code>.
     */
    public final TableField<StaffRecord, byte[]> PICTURE = createField(DSL.name("picture"), SQLDataType.BLOB, this, "");

    private Staff(Name alias, Table<StaffRecord> aliased) {
        this(alias, aliased, null);
    }

    private Staff(Name alias, Table<StaffRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.staff</code> table reference
     */
    public Staff(String alias) {
        this(DSL.name(alias), STAFF);
    }

    /**
     * Create an aliased <code>public.staff</code> table reference
     */
    public Staff(Name alias) {
        this(alias, STAFF);
    }

    /**
     * Create a <code>public.staff</code> table reference
     */
    public Staff() {
        this(DSL.name("staff"), null);
    }

    public <O extends Record> Staff(Table<O> child, ForeignKey<O, StaffRecord> key) {
        super(child, key, STAFF);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<StaffRecord, Long> getIdentity() {
        return (Identity<StaffRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StaffRecord> getPrimaryKey() {
        return Keys.STAFF_PKEY;
    }

    @Override
    public List<ForeignKey<StaffRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STAFF__STAFF_ADDRESS_ID_FKEY, Keys.STAFF__STAFF_STORE_ID_FKEY);
    }

    private transient Address _address;
    private transient Store _store;

    /**
     * Get the implicit join path to the <code>public.address</code> table.
     */
    public Address address() {
        if (_address == null)
            _address = new Address(this, Keys.STAFF__STAFF_ADDRESS_ID_FKEY);

        return _address;
    }

    /**
     * Get the implicit join path to the <code>public.store</code> table.
     */
    public Store store() {
        if (_store == null)
            _store = new Store(this, Keys.STAFF__STAFF_STORE_ID_FKEY);

        return _store;
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment</code> one-to-many child table.
     */
    public Condition paymentExists() {
        return paymentExists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentExists(Function<? super Payment, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT__PAYMENT_STAFF_ID_FKEY, t -> subquery.apply((Payment) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_01</code> one-to-many child table.
     */
    public Condition paymentP2007_01Exists() {
        return paymentP2007_01Exists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_01</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentP2007_01Exists(Function<? super PaymentP2007_01, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT_P2007_01__PAYMENT_P2007_01_STAFF_ID_FKEY, t -> subquery.apply((PaymentP2007_01) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_02</code> one-to-many child table.
     */
    public Condition paymentP2007_02Exists() {
        return paymentP2007_02Exists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_02</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentP2007_02Exists(Function<? super PaymentP2007_02, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT_P2007_02__PAYMENT_P2007_02_STAFF_ID_FKEY, t -> subquery.apply((PaymentP2007_02) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_03</code> one-to-many child table.
     */
    public Condition paymentP2007_03Exists() {
        return paymentP2007_03Exists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_03</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentP2007_03Exists(Function<? super PaymentP2007_03, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT_P2007_03__PAYMENT_P2007_03_STAFF_ID_FKEY, t -> subquery.apply((PaymentP2007_03) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_04</code> one-to-many child table.
     */
    public Condition paymentP2007_04Exists() {
        return paymentP2007_04Exists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_04</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentP2007_04Exists(Function<? super PaymentP2007_04, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT_P2007_04__PAYMENT_P2007_04_STAFF_ID_FKEY, t -> subquery.apply((PaymentP2007_04) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_05</code> one-to-many child table.
     */
    public Condition paymentP2007_05Exists() {
        return paymentP2007_05Exists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_05</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentP2007_05Exists(Function<? super PaymentP2007_05, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT_P2007_05__PAYMENT_P2007_05_STAFF_ID_FKEY, t -> subquery.apply((PaymentP2007_05) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_06</code> one-to-many child table.
     */
    public Condition paymentP2007_06Exists() {
        return paymentP2007_06Exists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.payment_p2007_06</code> one-to-many child table.
     */
    public <O extends Record> Condition paymentP2007_06Exists(Function<? super PaymentP2007_06, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_STAFF_ID_FKEY, t -> subquery.apply((PaymentP2007_06) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.rental</code> one-to-many child table.
     */
    public Condition rentalExists() {
        return rentalExists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.rental</code> one-to-many child table.
     */
    public <O extends Record> Condition rentalExists(Function<? super Rental, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.RENTAL__RENTAL_STAFF_ID_FKEY, t -> subquery.apply((Rental) t));
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.store</code> one-to-many child table.
     */
    public Condition storeExists() {
        return storeExists(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>EXISTS</code>s expressions
     * to the <code>public.store</code> one-to-many child table.
     */
    public <O extends Record> Condition storeExists(Function<? super Store, ? extends TableLike<O>> subquery) {
        return oneToManyExists(Keys.STORE__STORE_MANAGER_STAFF_ID_FKEY, t -> subquery.apply((Store) t));
    }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.staff</code> to-one parent table.
     */
    public Field<AddressRecord> addressRow() {
        return addressRow(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.staff</code> to-one parent table.
     */
    public <O extends Record> Field<O> addressRow(Function<? super Address, ? extends TableLike<O>> subquery) {
        return toOneRow(Keys.STAFF__STAFF_ADDRESS_ID_FKEY, t -> subquery.apply((Address) t));
    }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.staff</code> to-one parent table.
     */
    public Field<StoreRecord> storeRow() {
        return storeRow(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.staff</code> to-one parent table.
     */
    public <O extends Record> Field<O> storeRow(Function<? super Store, ? extends TableLike<O>> subquery) {
        return toOneRow(Keys.STAFF__STAFF_STORE_ID_FKEY, t -> subquery.apply((Store) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment</code> one-to-many child table.
     */
    public Field<Result<PaymentRecord>> paymentMultiset() {
        return paymentMultiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment</code> one-to-many child table.
     */
    public <O extends Record> Field<Result<O>> paymentMultiset(Function<? super Payment, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT__PAYMENT_STAFF_ID_FKEY, t -> subquery.apply((Payment) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_01</code> one-to-many child
     * table.
     */
    public Field<Result<PaymentP2007_01Record>> paymentP2007_01Multiset() {
        return paymentP2007_01Multiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_01</code> one-to-many child
     * table.
     */
    public <O extends Record> Field<Result<O>> paymentP2007_01Multiset(Function<? super PaymentP2007_01, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT_P2007_01__PAYMENT_P2007_01_STAFF_ID_FKEY, t -> subquery.apply((PaymentP2007_01) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_02</code> one-to-many child
     * table.
     */
    public Field<Result<PaymentP2007_02Record>> paymentP2007_02Multiset() {
        return paymentP2007_02Multiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_02</code> one-to-many child
     * table.
     */
    public <O extends Record> Field<Result<O>> paymentP2007_02Multiset(Function<? super PaymentP2007_02, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT_P2007_02__PAYMENT_P2007_02_STAFF_ID_FKEY, t -> subquery.apply((PaymentP2007_02) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_03</code> one-to-many child
     * table.
     */
    public Field<Result<PaymentP2007_03Record>> paymentP2007_03Multiset() {
        return paymentP2007_03Multiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_03</code> one-to-many child
     * table.
     */
    public <O extends Record> Field<Result<O>> paymentP2007_03Multiset(Function<? super PaymentP2007_03, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT_P2007_03__PAYMENT_P2007_03_STAFF_ID_FKEY, t -> subquery.apply((PaymentP2007_03) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_04</code> one-to-many child
     * table.
     */
    public Field<Result<PaymentP2007_04Record>> paymentP2007_04Multiset() {
        return paymentP2007_04Multiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_04</code> one-to-many child
     * table.
     */
    public <O extends Record> Field<Result<O>> paymentP2007_04Multiset(Function<? super PaymentP2007_04, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT_P2007_04__PAYMENT_P2007_04_STAFF_ID_FKEY, t -> subquery.apply((PaymentP2007_04) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_05</code> one-to-many child
     * table.
     */
    public Field<Result<PaymentP2007_05Record>> paymentP2007_05Multiset() {
        return paymentP2007_05Multiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_05</code> one-to-many child
     * table.
     */
    public <O extends Record> Field<Result<O>> paymentP2007_05Multiset(Function<? super PaymentP2007_05, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT_P2007_05__PAYMENT_P2007_05_STAFF_ID_FKEY, t -> subquery.apply((PaymentP2007_05) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_06</code> one-to-many child
     * table.
     */
    public Field<Result<PaymentP2007_06Record>> paymentP2007_06Multiset() {
        return paymentP2007_06Multiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.payment_p2007_06</code> one-to-many child
     * table.
     */
    public <O extends Record> Field<Result<O>> paymentP2007_06Multiset(Function<? super PaymentP2007_06, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_STAFF_ID_FKEY, t -> subquery.apply((PaymentP2007_06) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.rental</code> one-to-many child table.
     */
    public Field<Result<RentalRecord>> rentalMultiset() {
        return rentalMultiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.rental</code> one-to-many child table.
     */
    public <O extends Record> Field<Result<O>> rentalMultiset(Function<? super Rental, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.RENTAL__RENTAL_STAFF_ID_FKEY, t -> subquery.apply((Rental) t));
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.store</code> one-to-many child table.
     */
    public Field<Result<StoreRecord>> storeMultiset() {
        return storeMultiset(Function.identity());
    }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.store</code> one-to-many child table.
     */
    public <O extends Record> Field<Result<O>> storeMultiset(Function<? super Store, ? extends TableLike<O>> subquery) {
        return oneToManyMultiset(Keys.STORE__STORE_MANAGER_STAFF_ID_FKEY, t -> subquery.apply((Store) t));
    }

    @Override
    public Staff as(String alias) {
        return new Staff(DSL.name(alias), this);
    }

    @Override
    public Staff as(Name alias) {
        return new Staff(alias, this);
    }

    @Override
    public Staff as(Table<?> alias) {
        return new Staff(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Staff rename(String name) {
        return new Staff(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Staff rename(Name name) {
        return new Staff(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Staff rename(Table<?> name) {
        return new Staff(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, Long, String, Long, Boolean, String, String, LocalDateTime, byte[]> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super String, ? super String, ? super Long, ? super String, ? super Long, ? super Boolean, ? super String, ? super String, ? super LocalDateTime, ? super byte[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super String, ? super String, ? super Long, ? super String, ? super Long, ? super Boolean, ? super String, ? super String, ? super LocalDateTime, ? super byte[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
