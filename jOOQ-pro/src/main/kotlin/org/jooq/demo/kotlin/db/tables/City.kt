/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables


import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Result
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableLike
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.demo.kotlin.db.Public
import org.jooq.demo.kotlin.db.indexes.CITY_IDX_FK_COUNTRY_ID
import org.jooq.demo.kotlin.db.keys.ADDRESS__ADDRESS_CITY_ID_FKEY
import org.jooq.demo.kotlin.db.keys.CITY__CITY_COUNTRY_ID_FKEY
import org.jooq.demo.kotlin.db.keys.CITY__CITY_PKEY
import org.jooq.demo.kotlin.db.tables.records.AddressRecord
import org.jooq.demo.kotlin.db.tables.records.CityRecord
import org.jooq.demo.kotlin.db.tables.records.CountryRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class City(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CityRecord>?,
    aliased: Table<CityRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CityRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.city</code>
         */
        val CITY: City = City()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CityRecord> = CityRecord::class.java

    /**
     * The column <code>public.city.city_id</code>.
     */
    val CITY_ID: TableField<CityRecord, Long?> = createField(DSL.name("city_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.city.city</code>.
     */
    val CITY_: TableField<CityRecord, String?> = createField(DSL.name("city"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.city.country_id</code>.
     */
    val COUNTRY_ID: TableField<CityRecord, Long?> = createField(DSL.name("country_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.city.last_update</code>.
     */
    val LAST_UPDATE: TableField<CityRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now():::TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<CityRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CityRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.city</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.city</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.city</code> table reference
     */
    constructor(): this(DSL.name("city"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CityRecord>): this(Internal.createPathAlias(child, key), child, key, CITY, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(CITY_IDX_FK_COUNTRY_ID)
    override fun getIdentity(): Identity<CityRecord, Long?> = super.getIdentity() as Identity<CityRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<CityRecord> = CITY__CITY_PKEY
    override fun getReferences(): List<ForeignKey<CityRecord, *>> = listOf(CITY__CITY_COUNTRY_ID_FKEY)

    private lateinit var _country: Country

    /**
     * Get the implicit join path to the <code>public.country</code> table.
     */
    fun country(): Country {
        if (!this::_country.isInitialized)
            _country = Country(this, CITY__CITY_COUNTRY_ID_FKEY)

        return _country;
    }

    val country: Country
        get(): Country = country()

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.city</code> to-one parent table.
     */
    fun countryRow(): Field<CountryRecord> = countryRow { it }

    /**
     * A convenience constructor for correlated <code>ROW</code>s expressions to
     * the <code>public.city</code> to-one parent table.
     */
    fun <O : Record> countryRow(subquery: (Country) -> TableLike<O>): Field<O> = toOneRow(CITY__CITY_COUNTRY_ID_FKEY, { subquery(it as Country) })

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.address</code> one-to-many child table.
     */
    fun addressMultiset(): Field<Result<AddressRecord>> = addressMultiset { it }

    /**
     * A convenience constructor for correlated <code>MULTISET</code>s
     * expressions to the <code>public.address</code> one-to-many child table.
     */
    fun <O: Record>addressMultiset(subquery: (Address) -> TableLike<O>): Field<Result<O>> = oneToManyMultiset(ADDRESS__ADDRESS_CITY_ID_FKEY, { subquery(it as Address) })
    override fun `as`(alias: String): City = City(DSL.name(alias), this)
    override fun `as`(alias: Name): City = City(alias, this)
    override fun `as`(alias: Table<*>): City = City(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): City = City(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): City = City(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): City = City(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Long?, String?, Long?, LocalDateTime?> = super.fieldsRow() as Row4<Long?, String?, Long?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, Long?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, Long?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
